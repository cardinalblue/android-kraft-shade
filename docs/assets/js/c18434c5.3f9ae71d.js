"use strict";(self.webpackChunkdoc_website=self.webpackChunkdoc_website||[]).push([[6630],{4958:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"intro","href":"/android-kraft-shade/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Introduction","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/android-kraft-shade/docs/introduction/overview","docId":"introduction/overview","unlisted":false},{"type":"link","label":"Why KraftShade","href":"/android-kraft-shade/docs/introduction/why-kraftshade","docId":"introduction/why-kraftshade","unlisted":false},{"type":"link","label":"Architecture Overview","href":"/android-kraft-shade/docs/introduction/architecture-overview","docId":"introduction/architecture-overview","unlisted":false}]},{"type":"category","label":"Getting Started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Installation","href":"/android-kraft-shade/docs/getting-started/installation","docId":"getting-started/installation","unlisted":false},{"type":"link","label":"Quick Start Guide","href":"/android-kraft-shade/docs/getting-started/quick-start-guide","docId":"getting-started/quick-start-guide","unlisted":false},{"type":"link","label":"Basic Concepts","href":"/android-kraft-shade/docs/getting-started/basic-concepts","docId":"getting-started/basic-concepts","unlisted":false},{"type":"link","label":"first-effect","href":"/android-kraft-shade/docs/getting-started/first-effect","docId":"getting-started/first-effect","unlisted":false}]},{"type":"category","label":"Core Components","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"GlEnv (Graphics Environment)","href":"/android-kraft-shade/docs/core-components/glenv","docId":"core-components/glenv","unlisted":false},{"type":"category","label":"Shader System","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"KraftShader","href":"/android-kraft-shade/docs/core-components/shader-system/kraft-shader","docId":"core-components/shader-system/kraft-shader","unlisted":false},{"type":"link","label":"GlUniformDelegate","href":"/android-kraft-shade/docs/core-components/shader-system/gl-uniform-delegate","docId":"core-components/shader-system/gl-uniform-delegate","unlisted":false},{"type":"link","label":"Texture Inputs","href":"/android-kraft-shade/docs/core-components/shader-system/texture-inputs","docId":"core-components/shader-system/texture-inputs","unlisted":false}]},{"type":"category","label":"Pipeline System","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Pipeline Running Flow","href":"/android-kraft-shade/docs/core-components/pipeline-system/pipeline-running-flow","docId":"core-components/pipeline-system/pipeline-running-flow","unlisted":false},{"type":"link","label":"Buffer Management","href":"/android-kraft-shade/docs/core-components/pipeline-system/buffer-management","docId":"core-components/pipeline-system/buffer-management","unlisted":false}]},{"type":"link","label":"Input System","href":"/android-kraft-shade/docs/core-components/input-system","docId":"core-components/input-system","unlisted":false}],"href":"/android-kraft-shade/docs/core-components/"},{"type":"category","label":"View Components","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Android Views","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"KraftTextureView","href":"/android-kraft-shade/docs/view-components/android-views/kraft-texture-view","docId":"view-components/android-views/kraft-texture-view","unlisted":false},{"type":"link","label":"KraftEffectTextureView","href":"/android-kraft-shade/docs/view-components/android-views/kraft-effect-texture-view","docId":"view-components/android-views/kraft-effect-texture-view","unlisted":false},{"type":"link","label":"AnimatedKraftTextureView","href":"/android-kraft-shade/docs/view-components/android-views/animated-kraft-texture-view","docId":"view-components/android-views/animated-kraft-texture-view","unlisted":false},{"type":"link","label":"KraftVideoEffectTextureView","href":"/android-kraft-shade/docs/view-components/android-views/kraft-video-effect-texture-view","docId":"view-components/android-views/kraft-video-effect-texture-view","unlisted":false}]},{"type":"category","label":"Jetpack Compose Integration","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"KraftShadeView","href":"/android-kraft-shade/docs/view-components/jetpack-compose/kraft-shade-view","docId":"view-components/jetpack-compose/kraft-shade-view","unlisted":false},{"type":"link","label":"KraftShadeEffectView","href":"/android-kraft-shade/docs/view-components/jetpack-compose/kraft-shade-effect-view","docId":"view-components/jetpack-compose/kraft-shade-effect-view","unlisted":false},{"type":"link","label":"KraftShadeAnimatedView","href":"/android-kraft-shade/docs/view-components/jetpack-compose/kraft-shade-animated-view","docId":"view-components/jetpack-compose/kraft-shade-animated-view","unlisted":false}]}],"href":"/android-kraft-shade/docs/view-components/"},{"type":"category","label":"Pipeline DSL","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction to the DSL","href":"/android-kraft-shade/docs/pipeline-dsl/introduction","docId":"pipeline-dsl/introduction","unlisted":false},{"type":"link","label":"Serial Pipeline","href":"/android-kraft-shade/docs/pipeline-dsl/serial-pipeline","docId":"pipeline-dsl/serial-pipeline","unlisted":false},{"type":"link","label":"Graph Pipeline","href":"/android-kraft-shade/docs/pipeline-dsl/graph-pipeline","docId":"pipeline-dsl/graph-pipeline","unlisted":false},{"type":"link","label":"Nested Pipeline","href":"/android-kraft-shade/docs/pipeline-dsl/nested-pipeline","docId":"pipeline-dsl/nested-pipeline","unlisted":false},{"type":"link","label":"PipelineModifier","href":"/android-kraft-shade/docs/pipeline-dsl/pipeline-modifier","docId":"pipeline-dsl/pipeline-modifier","unlisted":false},{"type":"link","label":"Best Practices","href":"/android-kraft-shade/docs/pipeline-dsl/best-practices","docId":"pipeline-dsl/best-practices","unlisted":false}],"href":"/android-kraft-shade/docs/pipeline-dsl/"},{"type":"category","label":"Built-in Shaders","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Base Shaders","href":"/android-kraft-shade/docs/built-in-shaders/base-shaders","docId":"built-in-shaders/base-shaders","unlisted":false},{"type":"link","label":"Color Effects","href":"/android-kraft-shade/docs/built-in-shaders/color-effects","docId":"built-in-shaders/color-effects","unlisted":false},{"type":"link","label":"Alpha & Transparency Effects","href":"/android-kraft-shade/docs/built-in-shaders/alpha-transparency-effects","docId":"built-in-shaders/alpha-transparency-effects","unlisted":false},{"type":"link","label":"Texture & Artistic Effects","href":"/android-kraft-shade/docs/built-in-shaders/texture-artistic-effects","docId":"built-in-shaders/texture-artistic-effects","unlisted":false},{"type":"link","label":"Edge Detection","href":"/android-kraft-shade/docs/built-in-shaders/edge-detection","docId":"built-in-shaders/edge-detection","unlisted":false},{"type":"link","label":"Convolution & Mask Processing","href":"/android-kraft-shade/docs/built-in-shaders/convolution-mask-processing","docId":"built-in-shaders/convolution-mask-processing","unlisted":false},{"type":"link","label":"Blending Modes","href":"/android-kraft-shade/docs/built-in-shaders/blending-modes","docId":"built-in-shaders/blending-modes","unlisted":false},{"type":"link","label":"Blur & Distortion","href":"/android-kraft-shade/docs/built-in-shaders/blur-distortion","docId":"built-in-shaders/blur-distortion","unlisted":false}],"href":"/android-kraft-shade/docs/built-in-shaders/"},{"type":"category","label":"Advanced Topics","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Effect Serialization","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Serialization Overview","href":"/android-kraft-shade/docs/advanced-topics/effect-serialization/overview","docId":"advanced-topics/effect-serialization/overview","unlisted":false},{"type":"link","label":"EffectSerializer","href":"/android-kraft-shade/docs/advanced-topics/effect-serialization/effect-serializer","docId":"advanced-topics/effect-serialization/effect-serializer","unlisted":false},{"type":"link","label":"SerializedEffect","href":"/android-kraft-shade/docs/advanced-topics/effect-serialization/serialized-effect","docId":"advanced-topics/effect-serialization/serialized-effect","unlisted":false},{"type":"link","label":"Texture Provider Mapping","href":"/android-kraft-shade/docs/advanced-topics/effect-serialization/texture-provider-mapping","docId":"advanced-topics/effect-serialization/texture-provider-mapping","unlisted":false},{"type":"link","label":"Serialization Limitations","href":"/android-kraft-shade/docs/advanced-topics/effect-serialization/serialization-limitations","docId":"advanced-topics/effect-serialization/serialization-limitations","unlisted":false},{"type":"link","label":"Advanced Serialization","href":"/android-kraft-shade/docs/advanced-topics/effect-serialization/advanced-serialization","docId":"advanced-topics/effect-serialization/advanced-serialization","unlisted":false}]}]}]},"docs":{"advanced-topics/effect-serialization/advanced-serialization":{"id":"advanced-topics/effect-serialization/advanced-serialization","title":"Advanced Serialization","description":"","sidebar":"tutorialSidebar"},"advanced-topics/effect-serialization/effect-serializer":{"id":"advanced-topics/effect-serialization/effect-serializer","title":"EffectSerializer","description":"","sidebar":"tutorialSidebar"},"advanced-topics/effect-serialization/overview":{"id":"advanced-topics/effect-serialization/overview","title":"Serialization Overview","description":"","sidebar":"tutorialSidebar"},"advanced-topics/effect-serialization/serialization-limitations":{"id":"advanced-topics/effect-serialization/serialization-limitations","title":"Serialization Limitations","description":"","sidebar":"tutorialSidebar"},"advanced-topics/effect-serialization/serialized-effect":{"id":"advanced-topics/effect-serialization/serialized-effect","title":"SerializedEffect","description":"","sidebar":"tutorialSidebar"},"advanced-topics/effect-serialization/texture-provider-mapping":{"id":"advanced-topics/effect-serialization/texture-provider-mapping","title":"Texture Provider Mapping","description":"","sidebar":"tutorialSidebar"},"built-in-shaders/alpha-transparency-effects":{"id":"built-in-shaders/alpha-transparency-effects","title":"Alpha & Transparency Effects","description":"Alpha and transparency effects in KraftShade allow you to manipulate the transparency and opacity of images, which is essential for compositing and creating visual effects.","sidebar":"tutorialSidebar"},"built-in-shaders/base-shaders":{"id":"built-in-shaders/base-shaders","title":"Base Shaders","description":"Base shaders provide fundamental operations that serve as building blocks for more complex effects in KraftShade.","sidebar":"tutorialSidebar"},"built-in-shaders/blending-modes":{"id":"built-in-shaders/blending-modes","title":"Blending Modes","description":"Blending modes determine how two images or layers are combined together in KraftShade. These shaders enable sophisticated compositing techniques essential for creating complex visual effects.","sidebar":"tutorialSidebar"},"built-in-shaders/blur-distortion":{"id":"built-in-shaders/blur-distortion","title":"Blur & Distortion","description":"Blur and distortion effects in KraftShade allow you to create a wide range of visual transformations, from subtle blurring to dramatic warping of images.","sidebar":"tutorialSidebar"},"built-in-shaders/color-effects":{"id":"built-in-shaders/color-effects","title":"Color Effects","description":"Color effects in KraftShade allow you to manipulate the color properties of images, enabling a wide range of adjustments from basic brightness and contrast to advanced color grading.","sidebar":"tutorialSidebar"},"built-in-shaders/convolution-mask-processing":{"id":"built-in-shaders/convolution-mask-processing","title":"Convolution & Mask Processing","description":"Convolution and mask processing shaders in KraftShade enable sophisticated image processing operations like sharpening, embossing, and morphological transformations.","sidebar":"tutorialSidebar"},"built-in-shaders/edge-detection":{"id":"built-in-shaders/edge-detection","title":"Edge Detection","description":"Edge detection shaders in KraftShade identify and highlight boundaries between different regions in an image, which is essential for feature extraction, object recognition, and artistic effects.","sidebar":"tutorialSidebar"},"built-in-shaders/index":{"id":"built-in-shaders/index","title":"Built-in Shaders","description":"Welcome to the Built-in Shaders section of KraftShade documentation. This section covers the pre-built shaders that come with KraftShade, ready to use in your applications.","sidebar":"tutorialSidebar"},"built-in-shaders/texture-artistic-effects":{"id":"built-in-shaders/texture-artistic-effects","title":"Texture & Artistic Effects","description":"Texture and artistic effect shaders in KraftShade transform images into stylized renderings, simulating various artistic techniques and visual styles.","sidebar":"tutorialSidebar"},"core-components/glenv":{"id":"core-components/glenv","title":"GlEnv (Graphics Environment)","description":"The GlEnv (Graphics Environment) is a core component of KraftShade that manages the OpenGL ES environment and EGL context. It serves as the foundation for all rendering operations in the library.","sidebar":"tutorialSidebar"},"core-components/index":{"id":"core-components/index","title":"Core Components","description":"Welcome to the Core Components section of KraftShade documentation. This section covers the fundamental building blocks that make up the KraftShade framework.","sidebar":"tutorialSidebar"},"core-components/input-system":{"id":"core-components/input-system","title":"Input System","description":"The Input System is a core component of the Kraft Shade framework that provides a flexible and powerful mechanism for handling various types of inputs in shader pipelines. It enables dynamic parameter control, animation, and interactive effects by abstracting input sources and providing a consistent interface for accessing input values.","sidebar":"tutorialSidebar"},"core-components/pipeline-system/buffer-management":{"id":"core-components/pipeline-system/buffer-management","title":"Buffer Management","description":"KraftShade\'s pipeline system includes a sophisticated buffer management mechanism that efficiently handles OpenGL texture buffers. This document explains how buffers are managed, tracked, and recycled throughout the pipeline execution process.","sidebar":"tutorialSidebar"},"core-components/pipeline-system/pipeline-running-flow":{"id":"core-components/pipeline-system/pipeline-running-flow","title":"Pipeline Running Flow","description":"This document explains the execution flow of the KraftShade pipeline system, focusing on what happens after the requestRender method is invoked.","sidebar":"tutorialSidebar"},"core-components/shader-system/gl-uniform-delegate":{"id":"core-components/shader-system/gl-uniform-delegate","title":"GlUniformDelegate","description":"The GlUniformDelegate is a key component of KraftShade\'s shader system that provides an elegant and efficient way to manage shader uniform parameters. It leverages Kotlin\'s property delegation feature to create a clean, type-safe API for setting shader parameters. For more information about how this fits into the shader system, see the KraftShader documentation.","sidebar":"tutorialSidebar"},"core-components/shader-system/kraft-shader":{"id":"core-components/shader-system/kraft-shader","title":"KraftShader","description":"The KraftShader class is the foundation of KraftShade\'s shader system. It provides a flexible and powerful abstraction over OpenGL shader programs, handling the complexities of shader compilation, parameter management, and rendering.","sidebar":"tutorialSidebar"},"core-components/shader-system/texture-inputs":{"id":"core-components/shader-system/texture-inputs","title":"Texture Inputs","description":"Texture inputs are a fundamental part of KraftShade\'s shader system, allowing shaders to process image data. This document explains how texture inputs are managed and used within the KraftShade framework.","sidebar":"tutorialSidebar"},"getting-started/basic-concepts":{"id":"getting-started/basic-concepts","title":"Basic Concepts","description":"This guide introduces the key concepts and terminology used in KraftShade. Understanding these concepts will help you build more complex and efficient graphics applications.","sidebar":"tutorialSidebar"},"getting-started/first-effect":{"id":"getting-started/first-effect","title":"first-effect","description":"<HowToSchema","sidebar":"tutorialSidebar"},"getting-started/installation":{"id":"getting-started/installation","title":"Installation","description":"KraftShade is available on Maven Central and can be easily integrated into your Android project using Gradle.","sidebar":"tutorialSidebar"},"getting-started/quick-start-guide":{"id":"getting-started/quick-start-guide","title":"Quick Start Guide","description":"This guide will help you get started with KraftShade by creating a simple image effect application. We\'ll walk through the basic steps to set up a project and create a simple effect that adjusts the saturation and brightness of an image.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"intro","description":"<TechArticleSchema","sidebar":"tutorialSidebar"},"introduction/architecture-overview":{"id":"introduction/architecture-overview","title":"Architecture Overview","description":"KraftShade is built with a modular, layered architecture that provides flexibility, performance, and ease of use. This document provides a high-level overview of the KraftShade architecture, its core components, and how they interact.","sidebar":"tutorialSidebar"},"introduction/overview":{"id":"introduction/overview","title":"Overview","description":"What is KraftShade?","sidebar":"tutorialSidebar"},"introduction/why-kraftshade":{"id":"introduction/why-kraftshade","title":"Why KraftShade","description":"Understanding GPUImage","sidebar":"tutorialSidebar"},"pipeline-dsl/best-practices":{"id":"pipeline-dsl/best-practices","title":"Best Practices","description":"This guide provides recommendations and best practices for using the KraftShade Pipeline DSL effectively. Following these guidelines will help you create efficient, maintainable, and performant shader pipelines.","sidebar":"tutorialSidebar"},"pipeline-dsl/graph-pipeline":{"id":"pipeline-dsl/graph-pipeline","title":"Graph Pipeline","description":"A Graph Pipeline in KraftShade provides a more flexible approach to shader operations compared to a Serial Pipeline. Instead of a linear sequence, a Graph Pipeline allows you to create complex, non-linear processing flows where you have precise control over the input and output of each step.","sidebar":"tutorialSidebar"},"pipeline-dsl/index":{"id":"pipeline-dsl/index","title":"Pipeline DSL","description":"Welcome to the Pipeline DSL section of KraftShade documentation. This section covers the Domain Specific Language (DSL) used to create and configure shader pipelines in KraftShade.","sidebar":"tutorialSidebar"},"pipeline-dsl/introduction":{"id":"pipeline-dsl/introduction","title":"Introduction to the DSL","description":"The KraftShade Pipeline DSL (Domain Specific Language) provides a concise and expressive way to define image processing pipelines. It allows you to chain multiple shader effects together in various configurations to create complex visual effects.","sidebar":"tutorialSidebar"},"pipeline-dsl/nested-pipeline":{"id":"pipeline-dsl/nested-pipeline","title":"Nested Pipeline","description":"Nested Pipelines in KraftShade allow you to combine the features of Serial and Graph Pipelines, creating modular and reusable pipeline components. This approach enables you to build complex effects by composing simpler ones, improving code organization and reusability.","sidebar":"tutorialSidebar"},"pipeline-dsl/pipeline-modifier":{"id":"pipeline-dsl/pipeline-modifier","title":"PipelineModifier","description":"PipelineModifier is a powerful feature in KraftShade that allows you to create reusable, composable pipeline components. These modifiers encapsulate complex pipeline operations into reusable units that can be easily integrated into larger pipeline setups.","sidebar":"tutorialSidebar"},"pipeline-dsl/serial-pipeline":{"id":"pipeline-dsl/serial-pipeline","title":"Serial Pipeline","description":"A Serial Pipeline in KraftShade is a linear sequence of shader operations where the output of each step becomes the input for the next step. This is the most common and straightforward way to chain multiple effects together.","sidebar":"tutorialSidebar"},"view-components/android-views/animated-kraft-texture-view":{"id":"view-components/android-views/animated-kraft-texture-view","title":"AnimatedKraftTextureView","description":"AnimatedKraftTextureView extends KraftEffectTextureView to provide animation capabilities for shader effects.","sidebar":"tutorialSidebar"},"view-components/android-views/kraft-effect-texture-view":{"id":"view-components/android-views/kraft-effect-texture-view","title":"KraftEffectTextureView","description":"KraftEffectTextureView extends KraftTextureView to provide a convenient way to apply shader effects to images and other content.","sidebar":"tutorialSidebar"},"view-components/android-views/kraft-texture-view":{"id":"view-components/android-views/kraft-texture-view","title":"KraftTextureView","description":"\u26a0\ufe0f Important Note: In most cases, you usually don\'t need to use KraftTextureView directly. KraftEffectTextureView or AnimatedKraftTextureView provide higher-level functionality that is more suitable for most use cases. Only use KraftTextureView directly if you need very custom OpenGL rendering that doesn\'t fit the patterns of the specialized views.","sidebar":"tutorialSidebar"},"view-components/android-views/kraft-video-effect-texture-view":{"id":"view-components/android-views/kraft-video-effect-texture-view","title":"KraftVideoEffectTextureView","description":"KraftVideoEffectTextureView is a specialized view that extends KraftEffectTextureView to provide seamless video playback with shader effects. It handles video rendering, MediaPlayer management, and automatic texture updates for video frames.","sidebar":"tutorialSidebar"},"view-components/index":{"id":"view-components/index","title":"View Components","description":"KraftShade provides a set of view components for integrating OpenGL shader effects into your Android applications, with support for both traditional Android Views and Jetpack Compose.","sidebar":"tutorialSidebar"},"view-components/jetpack-compose/kraft-shade-animated-view":{"id":"view-components/jetpack-compose/kraft-shade-animated-view","title":"KraftShadeAnimatedView","description":"KraftShadeAnimatedView is a Jetpack Compose wrapper for AnimatedKraftTextureView, providing animation capabilities for shader effects in Compose UIs.","sidebar":"tutorialSidebar"},"view-components/jetpack-compose/kraft-shade-effect-view":{"id":"view-components/jetpack-compose/kraft-shade-effect-view","title":"KraftShadeEffectView","description":"KraftShadeEffectView is a Jetpack Compose wrapper for KraftEffectTextureView, providing shader effect capabilities in Compose UIs.","sidebar":"tutorialSidebar"},"view-components/jetpack-compose/kraft-shade-view":{"id":"view-components/jetpack-compose/kraft-shade-view","title":"KraftShadeView","description":"\u26a0\ufe0f Important Note: In most cases, you usually don\'t need to use KraftShadeView directly. KraftShadeEffectView or KraftShadeAnimatedView provide higher-level functionality that is more suitable for most use cases. Only use KraftShadeView directly if you need very custom OpenGL rendering that doesn\'t fit the patterns of the specialized views.","sidebar":"tutorialSidebar"}}}}')}}]);
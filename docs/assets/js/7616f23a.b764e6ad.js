"use strict";(self.webpackChunkdoc_website=self.webpackChunkdoc_website||[]).push([[6769],{1206:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"introduction/overview","title":"Overview","description":"What is KraftShade?","source":"@site/docs/introduction/overview.md","sourceDirName":"introduction","slug":"/introduction/overview","permalink":"/android-kraft-shade/docs/introduction/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/cardinalblue/android-kraft-shade/tree/main/doc_website/docs/introduction/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"intro","permalink":"/android-kraft-shade/docs/intro"},"next":{"title":"Why KraftShade","permalink":"/android-kraft-shade/docs/introduction/why-kraftshade"}}');var r=n(4848),s=n(8453);const a={sidebar_position:1},d="Overview",l={},o=[{value:"What is KraftShade?",id:"what-is-kraftshade",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Flexible Pipeline Architecture",id:"flexible-pipeline-architecture",level:3},{value:"Kotlin-First Design",id:"kotlin-first-design",level:3},{value:"Comprehensive View Components",id:"comprehensive-view-components",level:3},{value:"Built-in Shader Library",id:"built-in-shader-library",level:3},{value:"Animation Support",id:"animation-support",level:3},{value:"Efficient Resource Management",id:"efficient-resource-management",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"Getting Started",id:"getting-started",level:2}];function c(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"overview",children:"Overview"})}),"\n",(0,r.jsx)(i.h2,{id:"what-is-kraftshade",children:"What is KraftShade?"}),"\n",(0,r.jsx)(i.p,{children:"KraftShade is a modern, flexible GPU-accelerated graphics library for Android that enables developers to create complex visual effects, filters, and animations. Built on OpenGL ES, KraftShade provides a powerful yet intuitive API for implementing high-performance graphics processing in Android applications."}),"\n",(0,r.jsx)(i.p,{children:"The library is designed to address the limitations of existing graphics libraries while providing a Kotlin-first approach that integrates seamlessly with modern Android development practices, including Jetpack Compose."}),"\n",(0,r.jsx)(i.h2,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsx)(i.h3,{id:"flexible-pipeline-architecture",children:"Flexible Pipeline Architecture"}),"\n",(0,r.jsx)(i.p,{children:"KraftShade's core strength lies in its flexible pipeline architecture that allows for both simple serial processing and complex graph-based shader pipelines:"}),"\n",(0,r.jsx)(i.mermaid,{value:"graph TD\n    classDef texture fill:#088\n    Input:::texture --\x3e Pipeline\n    Pipeline --\x3e |Processing| Output:::texture\n    \n    subgraph Pipeline\n        SerialPipeline[Serial Pipeline]\n        GraphPipeline[Graph Pipeline]\n        NestedPipeline[Nested Pipeline]\n    end"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Serial Pipelines"}),": Chain multiple effects in sequence"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Graph Pipelines"}),": Create non-linear processing flows with multiple branches"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Nested Pipelines"}),": Combine different pipeline types for complex effects"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"kotlin-first-design",children:"Kotlin-First Design"}),"\n",(0,r.jsx)(i.p,{children:"KraftShade embraces modern Kotlin features to provide an intuitive and type-safe API:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-kotlin",children:"// Creating a simple effect with KraftShade\npipeline(windowSurface) {\n    serialSteps(\n        inputTexture = bitmap.asTexture(),\n        targetBuffer = windowSurface,\n    ) {\n        step(SaturationKraftShader()) {\n            saturation = 1.5f\n        }\n\n        step(ContrastKraftShader()) {\n            contrast = 1.2f\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(i.h3,{id:"comprehensive-view-components",children:"Comprehensive View Components"}),"\n",(0,r.jsx)(i.p,{children:"KraftShade provides ready-to-use view components for both traditional Android Views and Jetpack Compose:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Android Views"}),":"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"KraftTextureView"}),": Base OpenGL rendering view"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"KraftEffectTextureView"}),": Effect-enabled view"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"AnimatedKraftTextureView"}),": Animation support"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Jetpack Compose"}),":"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"KraftShadeView"}),": Compose wrapper for KraftTextureView"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"KraftShadeEffectView"}),": Compose wrapper for KraftEffectTextureView"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"KraftShadeAnimatedView"}),": Compose wrapper for AnimatedKraftTextureView"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"built-in-shader-library",children:"Built-in Shader Library"}),"\n",(0,r.jsx)(i.p,{children:"KraftShade comes with a comprehensive set of built-in shaders for common visual effects:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Color manipulation (saturation, contrast, hue, etc.)"}),"\n",(0,r.jsx)(i.li,{children:"Blur and distortion effects"}),"\n",(0,r.jsx)(i.li,{children:"Edge detection and convolution operations"}),"\n",(0,r.jsx)(i.li,{children:"Blending modes"}),"\n",(0,r.jsx)(i.li,{children:"Artistic effects"}),"\n",(0,r.jsx)(i.li,{children:"Alpha and transparency handling"}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"animation-support",children:"Animation Support"}),"\n",(0,r.jsx)(i.p,{children:"Create dynamic, time-based animations with KraftShade's animation system:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-kotlin",children:"// Animated saturation effect\nval saturationInput = timeInput\n    .bounceBetween(0f, 2f)\n    .withDuration(2000)\n\npipeline(windowSurface) {\n    serialSteps(bitmap.asTexture(), windowSurface) {\n        step(SaturationKraftShader()) { shader ->\n            shader.saturation = saturationInput.get()\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(i.h3,{id:"efficient-resource-management",children:"Efficient Resource Management"}),"\n",(0,r.jsx)(i.p,{children:"KraftShade handles OpenGL resource management automatically:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Automatic buffer recycling"}),"\n",(0,r.jsx)(i.li,{children:"Texture reuse optimization"}),"\n",(0,r.jsx)(i.li,{children:"Proper cleanup of OpenGL resources"}),"\n",(0,r.jsx)(i.li,{children:"Thread-safe OpenGL context handling"}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,r.jsx)(i.p,{children:"KraftShade is ideal for a wide range of applications:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Photo Editing Apps"}),": Apply filters and effects to images"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Video Processing"}),": Real-time video effects and filters"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Creative Tools"}),": Drawing and artistic applications"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"UI Effects"}),": Add visual flair to your app's interface"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Augmented Reality"}),": Enhance camera feeds with effects"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Data Visualization"}),": GPU-accelerated rendering of complex data"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsxs)(i.p,{children:["Ready to start using KraftShade? Check out the ",(0,r.jsx)(i.a,{href:"/android-kraft-shade/docs/getting-started/installation",children:"Installation"})," guide to add KraftShade to your project, then follow the ",(0,r.jsx)(i.a,{href:"/android-kraft-shade/docs/getting-started/quick-start-guide",children:"Quick Start Guide"})," to create your first effect."]}),"\n",(0,r.jsxs)(i.p,{children:["For a deeper understanding of why KraftShade was created and how it compares to alternatives, see ",(0,r.jsx)(i.a,{href:"/android-kraft-shade/docs/introduction/why-kraftshade",children:"Why KraftShade"}),"."]})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>d});var t=n(6540);const r={},s=t.createContext(r);function a(e){const i=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);
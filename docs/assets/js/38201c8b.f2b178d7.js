"use strict";(self.webpackChunkdoc_website=self.webpackChunkdoc_website||[]).push([[2142],{4731:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"view-components/android-views/kraft-texture-view","title":"KraftTextureView","description":"\u26a0\ufe0f Important Note: In most cases, you usually don\'t need to use KraftTextureView directly. KraftEffectTextureView or AnimatedKraftTextureView provide higher-level functionality that is more suitable for most use cases. Only use KraftTextureView directly if you need very custom OpenGL rendering that doesn\'t fit the patterns of the specialized views.","source":"@site/docs/view-components/android-views/kraft-texture-view.md","sourceDirName":"view-components/android-views","slug":"/view-components/android-views/kraft-texture-view","permalink":"/android-kraft-shade/docs/view-components/android-views/kraft-texture-view","draft":false,"unlisted":false,"editUrl":"https://github.com/cardinalblue/android-kraft-shade/tree/main/doc_website/docs/view-components/android-views/kraft-texture-view.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"View Components","permalink":"/android-kraft-shade/docs/view-components/"},"next":{"title":"KraftEffectTextureView","permalink":"/android-kraft-shade/docs/view-components/android-views/kraft-effect-texture-view"}}');var r=t(4848),s=t(8453);const a={sidebar_position:1},o="KraftTextureView",d={},c=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Important Methods",id:"important-methods",level:2},{value:"<code>runGlTask</code>",id:"rungltask",level:3},{value:"<code>terminate</code>",id:"terminate",level:3},{value:"Considerations",id:"considerations",level:2},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"krafttextureview",children:"KraftTextureView"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\u26a0\ufe0f Important Note:"})," In most cases, you usually don't need to use ",(0,r.jsx)(n.code,{children:"KraftTextureView"})," directly. ",(0,r.jsx)(n.a,{href:"/android-kraft-shade/docs/view-components/android-views/kraft-effect-texture-view",children:"KraftEffectTextureView"})," or ",(0,r.jsx)(n.a,{href:"/android-kraft-shade/docs/view-components/android-views/animated-kraft-texture-view",children:"AnimatedKraftTextureView"})," provide higher-level functionality that is more suitable for most use cases. Only use ",(0,r.jsx)(n.code,{children:"KraftTextureView"})," directly if you need very custom OpenGL rendering that doesn't fit the patterns of the specialized views."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"KraftTextureView"})," is the base class for all View implementations in KraftShade. It provides the fundamental OpenGL rendering capabilities that other specialized views build upon."]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"KraftTextureView"})," extends Android's ",(0,r.jsx)(n.code,{children:"TextureView"})," and provides a foundation for OpenGL rendering in KraftShade. It manages the OpenGL environment (",(0,r.jsx)(n.code,{children:"GlEnv"}),") and window surface, handling the lifecycle of these components in sync with the view's lifecycle."]}),"\n",(0,r.jsxs)(n.p,{children:["While you typically won't use ",(0,r.jsx)(n.code,{children:"KraftTextureView"})," directly (instead using ",(0,r.jsx)(n.code,{children:"KraftEffectTextureView"})," or ",(0,r.jsx)(n.code,{children:"AnimatedKraftTextureView"}),"), understanding its core functionality is important for advanced usage scenarios."]}),"\n",(0,r.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Manages the OpenGL environment lifecycle"}),"\n",(0,r.jsx)(n.li,{children:"Provides a window surface for rendering"}),"\n",(0,r.jsx)(n.li,{children:"Handles task scheduling for OpenGL operations"}),"\n",(0,r.jsx)(n.li,{children:"Synchronizes with the view's attachment/detachment lifecycle"}),"\n",(0,r.jsx)(n.li,{children:"Supports transparent rendering"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsxs)(n.p,{children:["Here's a simple example of using ",(0,r.jsx)(n.code,{children:"KraftTextureView"})," to render a custom shader:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"class MyActivity : AppCompatActivity() {\n    private lateinit var kraftTextureView: KraftTextureView\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        // Create the view\n        kraftTextureView = KraftTextureView(this)\n        setContentView(kraftTextureView)\n        \n        // Run an OpenGL task when the view is ready\n        kraftTextureView.runGlTask { windowSurface ->\n            // Create and apply a custom shader\n            val myShader = MyCustomShader()\n            myShader.drawTo(windowSurface)\n        }\n    }\n    \n    override fun onDestroy() {\n        // Clean up resources\n        kraftTextureView.terminate()\n        super.onDestroy()\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"important-methods",children:"Important Methods"}),"\n",(0,r.jsx)(n.h3,{id:"rungltask",children:(0,r.jsx)(n.code,{children:"runGlTask"})}),"\n",(0,r.jsxs)(n.p,{children:["The most important method in ",(0,r.jsx)(n.code,{children:"KraftTextureView"})," is ",(0,r.jsx)(n.code,{children:"runGlTask"}),", which allows you to execute OpenGL operations:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun runGlTask(task: KraftTextureViewTask): Job\n"})}),"\n",(0,r.jsx)(n.p,{children:"This method:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Takes a suspend function that receives a ",(0,r.jsx)(n.code,{children:"GlEnvDslScope"})," and ",(0,r.jsx)(n.code,{children:"WindowSurfaceBuffer"})]}),"\n",(0,r.jsxs)(n.li,{children:["Returns a Kotlin coroutine ",(0,r.jsx)(n.code,{children:"Job"})," that can be used to track or cancel the operation"]}),"\n",(0,r.jsx)(n.li,{children:"Automatically queues tasks if the OpenGL environment isn't ready yet"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"terminate",children:(0,r.jsx)(n.code,{children:"terminate"})}),"\n",(0,r.jsx)(n.p,{children:"Call this method to clean up resources when you're done with the view:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun terminate()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"considerations",children:"Considerations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"KraftTextureView"})," operations run asynchronously in a coroutine context"]}),"\n",(0,r.jsxs)(n.li,{children:["Tasks submitted via ",(0,r.jsx)(n.code,{children:"runGlTask"})," may be queued if the OpenGL environment isn't ready"]}),"\n",(0,r.jsxs)(n.li,{children:["Always call ",(0,r.jsx)(n.code,{children:"terminate()"})," when you're done with the view to prevent memory leaks"]}),"\n",(0,r.jsxs)(n.li,{children:["For most use cases, consider using ",(0,r.jsx)(n.code,{children:"KraftEffectTextureView"})," or ",(0,r.jsx)(n.code,{children:"AnimatedKraftTextureView"})," instead"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.p,{children:["For most applications, you'll want to use one of the specialized views that extend ",(0,r.jsx)(n.code,{children:"KraftTextureView"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/android-kraft-shade/docs/view-components/android-views/kraft-effect-texture-view",children:"KraftEffectTextureView"})," - For applying shader effects to images"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/android-kraft-shade/docs/view-components/android-views/animated-kraft-texture-view",children:"AnimatedKraftTextureView"})," - For creating animated shader effects"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);
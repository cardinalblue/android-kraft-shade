"use strict";(self.webpackChunkdoc_website=self.webpackChunkdoc_website||[]).push([[287],{3485:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"pipeline-dsl/index","title":"Pipeline DSL","description":"Welcome to the Pipeline DSL section of KraftShade documentation. This section covers the Domain Specific Language (DSL) used to create and configure shader pipelines in KraftShade.","source":"@site/docs/pipeline-dsl/index.md","sourceDirName":"pipeline-dsl","slug":"/pipeline-dsl/","permalink":"/android-kraft-shade/docs/pipeline-dsl/","draft":false,"unlisted":false,"editUrl":"https://github.com/cardinalblue/android-kraft-shade/tree/main/doc_website/docs/pipeline-dsl/index.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"KraftShadeAnimatedView","permalink":"/android-kraft-shade/docs/view-components/jetpack-compose/kraft-shade-animated-view"},"next":{"title":"Introduction to the DSL","permalink":"/android-kraft-shade/docs/pipeline-dsl/introduction"}}');var s=n(4848),r=n(8453);const a={sidebar_position:1},l="Pipeline DSL",d={},o=[{value:"Overview",id:"overview",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Related Topics",id:"related-topics",level:2}];function c(e){const i={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"pipeline-dsl",children:"Pipeline DSL"})}),"\n",(0,s.jsx)(i.p,{children:"Welcome to the Pipeline DSL section of KraftShade documentation. This section covers the Domain Specific Language (DSL) used to create and configure shader pipelines in KraftShade."}),"\n",(0,s.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(i.p,{children:"The Pipeline DSL is a powerful feature of KraftShade that allows you to:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Create complex shader pipelines with minimal boilerplate code"}),"\n",(0,s.jsx)(i.li,{children:"Chain multiple shaders together in various configurations"}),"\n",(0,s.jsx)(i.li,{children:"Configure shader parameters and inputs in a type-safe way"}),"\n",(0,s.jsx)(i.li,{children:"Create reusable pipeline components"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,s.jsx)(i.p,{children:"The Pipeline DSL includes several key components:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"./introduction",children:"Introduction"}),": An overview of the Pipeline DSL and its benefits"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"./serial-pipeline",children:"Serial Pipeline"}),": Creating linear chains of shaders"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"./graph-pipeline",children:"Graph Pipeline"}),": Creating more complex, non-linear shader graphs"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"./nested-pipeline",children:"Nested Pipeline"}),": Composing pipelines within pipelines"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"./best-practices",children:"Best Practices"}),": Guidelines for effective pipeline creation"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsxs)(i.p,{children:["If you're new to KraftShade, we recommend starting with the ",(0,s.jsx)(i.a,{href:"../getting-started/quick-start-guide",children:"Quick Start Guide"})," to see the Pipeline DSL in action with simple examples."]}),"\n",(0,s.jsx)(i.h2,{id:"related-topics",children:"Related Topics"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"../core-components",children:"Core Components"}),": Learn about the fundamental building blocks of KraftShade"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"../built-in-shaders",children:"Built-in Shaders"}),": Explore the shaders that can be used in your pipelines"]}),"\n"]})]})}function p(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>l});var t=n(6540);const s={},r=t.createContext(s);function a(e){const i=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);
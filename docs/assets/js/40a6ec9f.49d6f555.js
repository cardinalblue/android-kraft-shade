"use strict";(self.webpackChunkdoc_website=self.webpackChunkdoc_website||[]).push([[1591],{5810:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"view-components/jetpack-compose/kraft-shade-view","title":"KraftShadeView","description":"\u26a0\ufe0f Important Note: In most cases, you usually don\'t need to use KraftShadeView directly. KraftShadeEffectView or KraftShadeAnimatedView provide higher-level functionality that is more suitable for most use cases. Only use KraftShadeView directly if you need very custom OpenGL rendering that doesn\'t fit the patterns of the specialized views.","source":"@site/docs/view-components/jetpack-compose/kraft-shade-view.md","sourceDirName":"view-components/jetpack-compose","slug":"/view-components/jetpack-compose/kraft-shade-view","permalink":"/android-kraft-shade/docs/view-components/jetpack-compose/kraft-shade-view","draft":false,"unlisted":false,"editUrl":"https://github.com/cardinalblue/android-kraft-shade/tree/main/doc_website/docs/view-components/jetpack-compose/kraft-shade-view.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"KraftVideoEffectTextureView","permalink":"/android-kraft-shade/docs/view-components/android-views/kraft-video-effect-texture-view"},"next":{"title":"KraftShadeEffectView","permalink":"/android-kraft-shade/docs/view-components/jetpack-compose/kraft-shade-effect-view"}}');var r=t(4848),s=t(8453);const i={sidebar_position:1},o="KraftShadeView",d={},c=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Components",id:"components",level:2},{value:"KraftShadeView Composable",id:"kraftshadeview-composable",level:3},{value:"KraftShadeState",id:"kraftshadestate",level:3},{value:"rememberKraftShadeState",id:"rememberkraftshadestate",level:3},{value:"Example: Custom Rendering in Compose",id:"example-custom-rendering-in-compose",level:2},{value:"Lifecycle Management",id:"lifecycle-management",level:2},{value:"Considerations",id:"considerations",level:2},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"kraftshadeview",children:"KraftShadeView"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\u26a0\ufe0f Important Note:"})," In most cases, you usually don't need to use ",(0,r.jsx)(n.code,{children:"KraftShadeView"})," directly. ",(0,r.jsx)(n.a,{href:"/android-kraft-shade/docs/view-components/jetpack-compose/kraft-shade-effect-view",children:"KraftShadeEffectView"})," or ",(0,r.jsx)(n.a,{href:"/android-kraft-shade/docs/view-components/jetpack-compose/kraft-shade-animated-view",children:"KraftShadeAnimatedView"})," provide higher-level functionality that is more suitable for most use cases. Only use ",(0,r.jsx)(n.code,{children:"KraftShadeView"})," directly if you need very custom OpenGL rendering that doesn't fit the patterns of the specialized views."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"KraftShadeView"})," is a Jetpack Compose wrapper for ",(0,r.jsx)(n.a,{href:"/android-kraft-shade/docs/view-components/android-views/kraft-texture-view",children:"KraftTextureView"}),", providing OpenGL rendering capabilities in Compose UIs."]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"KraftShadeView"})," integrates the basic OpenGL rendering capabilities of ",(0,r.jsx)(n.code,{children:"KraftTextureView"})," into Jetpack Compose applications. It uses Compose's ",(0,r.jsx)(n.code,{children:"AndroidView"})," to wrap the native Android view and provides a state-based API that's more idiomatic for Compose applications."]}),"\n",(0,r.jsxs)(n.p,{children:["This component is the foundation for OpenGL rendering in Compose UIs with KraftShade, serving as the base for more specialized components like ",(0,r.jsx)(n.code,{children:"KraftShadeEffectView"})," and ",(0,r.jsx)(n.code,{children:"KraftShadeAnimatedView"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Integrates ",(0,r.jsx)(n.code,{children:"KraftTextureView"})," into Jetpack Compose UIs"]}),"\n",(0,r.jsx)(n.li,{children:"Provides a state-based API for managing the view"}),"\n",(0,r.jsx)(n.li,{children:"Handles proper resource cleanup with Compose's lifecycle"}),"\n",(0,r.jsx)(n.li,{children:"Supports running OpenGL tasks through the state object"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsxs)(n.p,{children:["Here's a simple example of using ",(0,r.jsx)(n.code,{children:"KraftShadeView"})," to render a custom shader in a Compose UI:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'@Composable\nfun TransparencyDemo() {\n    // Create and remember the state\n    val state = rememberKraftShadeState()\n    \n    // Create a colored background to demonstrate transparency\n    Box(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(Color.Red)\n    ) {\n        // Use KraftShadeView with the remembered state\n        KraftShadeView(\n            modifier = Modifier\n                .fillMaxSize()\n                .aspectRatio(1f),\n            state = state\n        )\n    }\n    \n    // Set up the shader when the composition is first created\n    LaunchedEffect(state) {\n        state.runGlTask { windowSurface ->\n            // Create and apply a custom shader\n            TransparencyShader().apply {\n                drawTo(windowSurface)\n            }\n        }\n    }\n}\n\n// A simple shader that demonstrates transparency\nclass TransparencyShader : KraftShader() {\n    override fun loadFragmentShader(): String = """\n        precision mediump float;\n        varying vec2 textureCoordinate;\n\n        void main() {\n            // Create a circular mask\n            vec2 center = vec2(0.5, 0.5);\n            float radius = 0.4;\n            float dist = distance(textureCoordinate, center);\n\n            // Inside the circle: semi-transparent blue\n            // Outside the circle: fully transparent\n            if (dist < radius) {\n                gl_FragColor = vec4(0.0, 0.0, 1.0, 0.5); // 50% transparent blue\n            } else {\n                gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0); // Fully transparent\n            }\n        }\n    """.trimIndent()\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,r.jsx)(n.h3,{id:"kraftshadeview-composable",children:"KraftShadeView Composable"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"@Composable\nfun KraftShadeView(\n    modifier: Modifier = Modifier,\n    state: KraftShadeState = rememberKraftShadeState()\n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The main Composable function that creates a ",(0,r.jsx)(n.code,{children:"KraftTextureView"})," and integrates it into your Compose UI."]}),"\n",(0,r.jsx)(n.p,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"modifier"}),": Standard Compose modifier for customizing the view's layout"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"state"}),": A ",(0,r.jsx)(n.code,{children:"KraftShadeState"})," that manages the view's state and operations"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"kraftshadestate",children:"KraftShadeState"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"class KraftShadeState(scope: CoroutineScope)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Manages the state of the ",(0,r.jsx)(n.code,{children:"KraftShadeView"})," and provides methods to interact with it."]}),"\n",(0,r.jsx)(n.p,{children:"Key methods:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"runGlTask(task: KraftTextureViewTask): Job"}),": Runs an OpenGL task on the view"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"terminate()"}),": Cleans up resources when the view is no longer needed"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"rememberkraftshadestate",children:"rememberKraftShadeState"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"@Composable\nfun rememberKraftShadeState(): KraftShadeState\n"})}),"\n",(0,r.jsxs)(n.p,{children:["A Compose helper function that creates and remembers a ",(0,r.jsx)(n.code,{children:"KraftShadeState"})," instance, ensuring it survives recomposition."]}),"\n",(0,r.jsx)(n.h2,{id:"example-custom-rendering-in-compose",children:"Example: Custom Rendering in Compose"}),"\n",(0,r.jsxs)(n.p,{children:["This example shows how to integrate ",(0,r.jsx)(n.code,{children:"KraftShadeView"})," into a more complex Compose UI:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'@Composable\nfun CustomRenderingScreen() {\n    val state = rememberKraftShadeState()\n    var aspectRatio by remember { mutableFloatStateOf(1f) }\n    \n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        // Render area\n        KraftShadeView(\n            modifier = Modifier\n                .weight(1f)\n                .aspectRatio(aspectRatio),\n            state = state\n        )\n        \n        // UI controls\n        Text(\n            text = "Custom OpenGL Rendering",\n            style = MaterialTheme.typography.headlineSmall,\n            modifier = Modifier.padding(16.dp)\n        )\n    }\n    \n    // Set up the rendering\n    LaunchedEffect(state) {\n        state.runGlTask { windowSurface ->\n            // Set a 16:9 aspect ratio\n            aspectRatio = 16f / 9f\n            \n            // Create a custom shader for rendering\n            CustomPatternShader().apply {\n                drawTo(windowSurface)\n            }\n        }\n    }\n}\n\n// A custom shader that creates a pattern\nclass CustomPatternShader : KraftShader() {\n    override fun loadFragmentShader(): String = """\n        precision mediump float;\n        varying vec2 textureCoordinate;\n\n        void main() {\n            // Create a checkerboard pattern\n            float x = floor(textureCoordinate.x * 10.0);\n            float y = floor(textureCoordinate.y * 10.0);\n            float pattern = mod(x + y, 2.0);\n            \n            if (pattern < 1.0) {\n                gl_FragColor = vec4(0.2, 0.3, 0.8, 1.0); // Blue\n            } else {\n                gl_FragColor = vec4(0.8, 0.2, 0.2, 1.0); // Red\n            }\n        }\n    """.trimIndent()\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"lifecycle-management",children:"Lifecycle Management"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"KraftShadeView"})," automatically handles the view's lifecycle in sync with Compose's lifecycle:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["When the Composable enters the composition, a new ",(0,r.jsx)(n.code,{children:"KraftTextureView"})," is created"]}),"\n",(0,r.jsxs)(n.li,{children:["The view is attached to the provided ",(0,r.jsx)(n.code,{children:"KraftShadeState"})]}),"\n",(0,r.jsxs)(n.li,{children:["When the Composable leaves the composition, a ",(0,r.jsx)(n.code,{children:"DisposableEffect"})," calls ",(0,r.jsx)(n.code,{children:"terminate()"})," to clean up resources"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This ensures proper resource management and prevents memory leaks."}),"\n",(0,r.jsx)(n.h2,{id:"considerations",children:"Considerations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["OpenGL operations should be performed within the ",(0,r.jsx)(n.code,{children:"runGlTask"})," method of the state object"]}),"\n",(0,r.jsxs)(n.li,{children:["For applying shader effects to images, consider using ",(0,r.jsx)(n.a,{href:"/android-kraft-shade/docs/view-components/jetpack-compose/kraft-shade-effect-view",children:"KraftShadeEffectView"})," instead"]}),"\n",(0,r.jsxs)(n.li,{children:["For animated effects, use ",(0,r.jsx)(n.a,{href:"/android-kraft-shade/docs/view-components/jetpack-compose/kraft-shade-animated-view",children:"KraftShadeAnimatedView"})]}),"\n",(0,r.jsxs)(n.li,{children:["The underlying ",(0,r.jsx)(n.code,{children:"KraftTextureView"})," operations run asynchronously in a coroutine context"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.p,{children:["For applying shader effects to images in Compose, see ",(0,r.jsx)(n.a,{href:"/android-kraft-shade/docs/view-components/jetpack-compose/kraft-shade-effect-view",children:"KraftShadeEffectView"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdoc_website=self.webpackChunkdoc_website||[]).push([[7747],{8216:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>d,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"view-components/index","title":"View Components","description":"KraftShade provides a set of view components for integrating OpenGL shader effects into your Android applications, with support for both traditional Android Views and Jetpack Compose.","source":"@site/docs/view-components/index.md","sourceDirName":"view-components","slug":"/view-components/","permalink":"/android-kraft-shade/docs/view-components/","draft":false,"unlisted":false,"editUrl":"https://github.com/cardinalblue/android-kraft-shade/tree/main/doc_website/docs/view-components/index.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Input System","permalink":"/android-kraft-shade/docs/core-components/input-system"},"next":{"title":"KraftTextureView","permalink":"/android-kraft-shade/docs/view-components/android-views/kraft-texture-view"}}');var t=n(4848),r=n(8453);const o={sidebar_position:1},d="View Components",a={},h=[{value:"Choosing the Right View",id:"choosing-the-right-view",level:2},{value:"For Android Views",id:"for-android-views",level:3},{value:"For Jetpack Compose",id:"for-jetpack-compose",level:3},{value:"Decision Flow",id:"decision-flow",level:2},{value:"Android Views vs. Compose Integration",id:"android-views-vs-compose-integration",level:2},{value:"Understanding Animation in KraftShade",id:"understanding-animation-in-kraftshade",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Android Views",id:"android-views",level:3},{value:"Jetpack Compose",id:"jetpack-compose",level:3}];function c(e){const i={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"view-components",children:"View Components"})}),"\n",(0,t.jsx)(i.p,{children:"KraftShade provides a set of view components for integrating OpenGL shader effects into your Android applications, with support for both traditional Android Views and Jetpack Compose."}),"\n",(0,t.jsx)(i.h2,{id:"choosing-the-right-view",children:"Choosing the Right View"}),"\n",(0,t.jsx)(i.p,{children:"When working with KraftShade, it's important to choose the right view component for your needs. Here's a guide to help you decide:"}),"\n",(0,t.jsx)(i.h3,{id:"for-android-views",children:"For Android Views"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"AnimatedKraftTextureView"})," - Use this when you need time-based animations that update with the display refresh rate (using Android's Choreographer). This is ideal for effects that change over time, like transitions or procedural animations."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"KraftEffectTextureView"})," - Use this when you need to apply shader effects to images or other content, but don't need time-based animations. This is suitable for static effects or effects that only change in response to user input."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"KraftTextureView"})," - This is the base class that the other views extend. ",(0,t.jsx)(i.strong,{children:"In most cases, you usually don't need to use this directly"}),". The specialized views above provide higher-level functionality that is more suitable for most use cases. Only use this if you need very custom OpenGL rendering that doesn't fit the patterns of the specialized views."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"for-jetpack-compose",children:"For Jetpack Compose"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"KraftShadeAnimatedView"})," - Use this when you need time-based animations in a Compose UI. This is the Compose equivalent of AnimatedKraftTextureView."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"KraftShadeEffectView"})," - Use this when you need to apply shader effects in a Compose UI without time-based animations. This is the Compose equivalent of KraftEffectTextureView."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"KraftShadeView"})," - This is the base Compose wrapper for KraftTextureView. ",(0,t.jsx)(i.strong,{children:"In most cases, you usually don't need to use this directly"}),". The specialized Compose views above provide higher-level functionality that is more suitable for most use cases. Only use this for very custom OpenGL rendering in Compose."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"decision-flow",children:"Decision Flow"}),"\n",(0,t.jsx)(i.p,{children:"Here's a simple decision flow to help you choose the right view:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"Are you using Jetpack Compose?"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Yes \u2192 Go to step 2"}),"\n",(0,t.jsx)(i.li,{children:"No \u2192 Go to step 3"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"For Compose UIs:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Do you need time-based animations that update with the display refresh rate?","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Yes \u2192 Use ",(0,t.jsx)(i.strong,{children:"KraftShadeAnimatedView"})]}),"\n",(0,t.jsxs)(i.li,{children:["No \u2192 Use ",(0,t.jsx)(i.strong,{children:"KraftShadeEffectView"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"For traditional Android Views:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Do you need time-based animations that update with the display refresh rate?","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Yes \u2192 Use ",(0,t.jsx)(i.strong,{children:"AnimatedKraftTextureView"})]}),"\n",(0,t.jsxs)(i.li,{children:["No \u2192 Use ",(0,t.jsx)(i.strong,{children:"KraftEffectTextureView"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"android-views-vs-compose-integration",children:"Android Views vs. Compose Integration"}),"\n",(0,t.jsx)(i.p,{children:"The Jetpack Compose components are wrappers around the Android View implementations, providing a more idiomatic Compose API. Here's how they correspond:"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Android View"}),(0,t.jsx)(i.th,{children:"Compose Wrapper"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"KraftTextureView"}),(0,t.jsx)(i.td,{children:"KraftShadeView"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"KraftEffectTextureView"}),(0,t.jsx)(i.td,{children:"KraftShadeEffectView"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"AnimatedKraftTextureView"}),(0,t.jsx)(i.td,{children:"KraftShadeAnimatedView"})]})]})]}),"\n",(0,t.jsx)(i.h2,{id:"understanding-animation-in-kraftshade",children:"Understanding Animation in KraftShade"}),"\n",(0,t.jsxs)(i.p,{children:["KraftShade uses Android's ",(0,t.jsx)(i.a,{href:"https://developer.android.com/reference/android/view/Choreographer",children:"Choreographer"})," for frame-synchronized animations. This ensures that animations run smoothly at the device's display refresh rate (typically 60fps)."]}),"\n",(0,t.jsx)(i.p,{children:"The animated views (AnimatedKraftTextureView and KraftShadeAnimatedView) provide:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Built-in TimeInput for creating time-based animations"}),"\n",(0,t.jsx)(i.li,{children:"Play/pause controls for animation"}),"\n",(0,t.jsx)(i.li,{children:"Automatic frame skipping when rendering can't keep up"}),"\n",(0,t.jsx)(i.li,{children:"Proper lifecycle management to conserve resources"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(i.p,{children:"Explore the documentation for each view component to learn more about their specific features and usage:"}),"\n",(0,t.jsx)(i.h3,{id:"android-views",children:"Android Views"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/android-kraft-shade/docs/view-components/android-views/kraft-texture-view",children:"KraftTextureView"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/android-kraft-shade/docs/view-components/android-views/kraft-effect-texture-view",children:"KraftEffectTextureView"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/android-kraft-shade/docs/view-components/android-views/animated-kraft-texture-view",children:"AnimatedKraftTextureView"})}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"jetpack-compose",children:"Jetpack Compose"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/android-kraft-shade/docs/view-components/jetpack-compose/kraft-shade-view",children:"KraftShadeView"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/android-kraft-shade/docs/view-components/jetpack-compose/kraft-shade-effect-view",children:"KraftShadeEffectView"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/android-kraft-shade/docs/view-components/jetpack-compose/kraft-shade-animated-view",children:"KraftShadeAnimatedView"})}),"\n"]})]})}function l(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>d});var s=n(6540);const t={},r=s.createContext(t);function o(e){const i=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);
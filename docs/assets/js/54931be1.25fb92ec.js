"use strict";(self.webpackChunkdoc_website=self.webpackChunkdoc_website||[]).push([[5615],{1722:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>c,frontMatter:()=>d,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"built-in-shaders/blending-modes","title":"Blending Modes","description":"Blending modes determine how two images or layers are combined together in KraftShade. These shaders enable sophisticated compositing techniques essential for creating complex visual effects.","source":"@site/docs/built-in-shaders/blending-modes.md","sourceDirName":"built-in-shaders","slug":"/built-in-shaders/blending-modes","permalink":"/android-kraft-shade/docs/built-in-shaders/blending-modes","draft":false,"unlisted":false,"editUrl":"https://github.com/cardinalblue/android-kraft-shade/tree/main/doc_website/docs/built-in-shaders/blending-modes.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Convolution & Mask Processing","permalink":"/android-kraft-shade/docs/built-in-shaders/convolution-mask-processing"},"next":{"title":"Blur & Distortion","permalink":"/android-kraft-shade/docs/built-in-shaders/blur-distortion"}}');var i=s(4848),t=s(8453);const d={sidebar_position:7},l="Blending Modes",a={},h=[{value:"Overview",id:"overview",level:2},{value:"Available Blending Mode Shaders",id:"available-blending-mode-shaders",level:2},{value:"MixBlendKraftShader",id:"mixblendkraftshader",level:3},{value:"AlphaBlendKraftShader",id:"alphablendkraftshader",level:3},{value:"NormalBlendKraftShader",id:"normalblendkraftshader",level:3},{value:"MultiplyBlendKraftShader",id:"multiplyblendkraftshader",level:3},{value:"ScreenBlendKraftShader",id:"screenblendkraftshader",level:3},{value:"HardLightBlendKraftShader",id:"hardlightblendkraftshader",level:3},{value:"AddBlendKraftShader",id:"addblendkraftshader",level:3},{value:"SourceOverBlendKraftShader",id:"sourceoverblendkraftshader",level:3},{value:"Using Blending Mode Shaders in Pipelines",id:"using-blending-mode-shaders-in-pipelines",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Related Topics",id:"related-topics",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"blending-modes",children:"Blending Modes"})}),"\n",(0,i.jsx)(n.p,{children:"Blending modes determine how two images or layers are combined together in KraftShade. These shaders enable sophisticated compositing techniques essential for creating complex visual effects."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Blending modes are mathematical operations that determine how pixels from two different images interact when overlaid. KraftShade provides a variety of blending modes inspired by those found in professional image editing software, allowing for creative combinations of textures and effects."}),"\n",(0,i.jsxs)(n.p,{children:["All blend shaders in KraftShade extend from the ",(0,i.jsx)(n.code,{children:"TwoTextureInputKraftShader"})," base class, which handles the input of two textures. Most blend shaders also include an ",(0,i.jsx)(n.code,{children:"intensity"})," parameter that controls the strength of the blend effect."]}),"\n",(0,i.jsx)(n.h2,{id:"available-blending-mode-shaders",children:"Available Blending Mode Shaders"}),"\n",(0,i.jsx)(n.h3,{id:"mixblendkraftshader",children:"MixBlendKraftShader"}),"\n",(0,i.jsx)(n.p,{children:"The base class for blend shaders that mix two textures based on a percentage. This is an abstract class that other blend shaders can extend."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"mixturePercent"}),": Float value between 0.0 (only first texture) and 1.0 (only second texture)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"alphablendkraftshader",children:"AlphaBlendKraftShader"}),"\n",(0,i.jsx)(n.p,{children:"Blends two textures based on the alpha channel of the second texture and a mixture percentage."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"mixturePercent"}),": Float value between 0.0 (only first texture) and 1.0 (only second texture)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"intensity"}),": Controls the strength of the blend effect"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example Use Cases:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Smooth transitions between images"}),"\n",(0,i.jsx)(n.li,{children:"Creating composite images with varying levels of transparency"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"[IMAGE: AlphaBlendKraftShader - Left side shows first texture, middle shows second texture, right side shows blended result]"}),"\n",(0,i.jsx)(n.h3,{id:"normalblendkraftshader",children:"NormalBlendKraftShader"}),"\n",(0,i.jsx)(n.p,{children:"The standard blend mode that simply places the second texture over the first, respecting the alpha channel."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"intensity"}),": Controls the strength of the blend effect"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example Use Cases:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Basic layering of images"}),"\n",(0,i.jsx)(n.li,{children:"Standard compositing operations"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"[IMAGE: NormalBlendKraftShader - Left side shows first texture, middle shows second texture, right side shows blended result]"}),"\n",(0,i.jsx)(n.h3,{id:"multiplyblendkraftshader",children:"MultiplyBlendKraftShader"}),"\n",(0,i.jsx)(n.p,{children:"Multiplies the color values of the two textures, resulting in a darker image. White pixels have no effect, while black pixels make the result black."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"intensity"}),": Controls the strength of the blend effect"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example Use Cases:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Creating shadows and darkening effects"}),"\n",(0,i.jsx)(n.li,{children:"Simulating the effect of placing two transparent slides on top of each other"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"[IMAGE: MultiplyBlendKraftShader - Left side shows first texture, middle shows second texture, right side shows multiplied result]"}),"\n",(0,i.jsx)(n.h3,{id:"screenblendkraftshader",children:"ScreenBlendKraftShader"}),"\n",(0,i.jsx)(n.p,{children:"The opposite of multiply - it brightens the image. Black pixels have no effect, while white pixels make the result white."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"intensity"}),": Controls the strength of the blend effect"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example Use Cases:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Creating highlights and brightening effects"}),"\n",(0,i.jsx)(n.li,{children:"Simulating the effect of projecting multiple images onto the same screen"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"[IMAGE: ScreenBlendKraftShader - Left side shows first texture, middle shows second texture, right side shows screened result]"}),"\n",(0,i.jsx)(n.h3,{id:"hardlightblendkraftshader",children:"HardLightBlendKraftShader"}),"\n",(0,i.jsx)(n.p,{children:"A combination of multiply and screen. Dark areas in the second texture darken the first texture, while light areas lighten it."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"intensity"}),": Controls the strength of the blend effect"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example Use Cases:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Creating dramatic lighting effects"}),"\n",(0,i.jsx)(n.li,{children:"Adding texture and contrast to images"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"[IMAGE: HardLightBlendKraftShader - Left side shows first texture, middle shows second texture, right side shows hard light blend result]"}),"\n",(0,i.jsx)(n.h3,{id:"addblendkraftshader",children:"AddBlendKraftShader"}),"\n",(0,i.jsx)(n.p,{children:"Adds the color values of the two textures, resulting in a brighter image."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"intensity"}),": Controls the strength of the blend effect"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example Use Cases:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Creating glow and light effects"}),"\n",(0,i.jsx)(n.li,{children:"Combining multiple light sources"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"[IMAGE: AddBlendKraftShader - Left side shows first texture, middle shows second texture, right side shows additive blend result]"}),"\n",(0,i.jsx)(n.h3,{id:"sourceoverblendkraftshader",children:"SourceOverBlendKraftShader"}),"\n",(0,i.jsx)(n.p,{children:"Places the second texture over the first, respecting the alpha channel of both textures."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"intensity"}),": Controls the strength of the blend effect"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example Use Cases:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Standard alpha compositing"}),"\n",(0,i.jsx)(n.li,{children:"Layering images with transparency"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"[IMAGE: SourceOverBlendKraftShader - Left side shows first texture, middle shows second texture, right side shows source-over blend result]"}),"\n",(0,i.jsx)(n.h2,{id:"using-blending-mode-shaders-in-pipelines",children:"Using Blending Mode Shaders in Pipelines"}),"\n",(0,i.jsx)(n.p,{children:"Blending mode shaders require two input textures and are typically used to combine the results of previous processing steps. They can be used in various stages of a pipeline to create complex visual effects."}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsx)(n.p,{children:"When working with blend modes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Blending operations require two texture inputs, which can increase memory usage"}),"\n",(0,i.jsx)(n.li,{children:"Some blend modes are more computationally expensive than others"}),"\n",(0,i.jsx)(n.li,{children:"Consider using intermediate buffers to avoid recalculating the same inputs multiple times"}),"\n",(0,i.jsx)(n.li,{children:"For complex compositions with many layers, consider grouping blends to reduce the number of passes"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-topics",children:"Related Topics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./alpha-transparency-effects",children:"Alpha & Transparency Effects"}),": Learn about transparency manipulation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../pipeline-dsl",children:"Pipeline DSL"}),": See how to combine shaders into complex effects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../core-components/pipeline-system/buffer-management",children:"Buffer Management"}),": Understand how to efficiently manage buffers for multi-pass effects"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>l});var r=s(6540);const i={},t=r.createContext(i);function d(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);
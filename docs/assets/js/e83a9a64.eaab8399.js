"use strict";(self.webpackChunkdoc_website=self.webpackChunkdoc_website||[]).push([[9468],{6119:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>f,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"view-components/android-views/kraft-effect-texture-view","title":"KraftEffectTextureView","description":"KraftEffectTextureView extends KraftTextureView to provide a convenient way to apply shader effects to images and other content.","source":"@site/docs/view-components/android-views/kraft-effect-texture-view.md","sourceDirName":"view-components/android-views","slug":"/view-components/android-views/kraft-effect-texture-view","permalink":"/android-kraft-shade/docs/view-components/android-views/kraft-effect-texture-view","draft":false,"unlisted":false,"editUrl":"https://github.com/cardinalblue/android-kraft-shade/tree/main/doc_website/docs/view-components/android-views/kraft-effect-texture-view.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"KraftTextureView","permalink":"/android-kraft-shade/docs/view-components/android-views/kraft-texture-view"},"next":{"title":"AnimatedKraftTextureView","permalink":"/android-kraft-shade/docs/view-components/android-views/animated-kraft-texture-view"}}');var r=n(4848),a=n(8453);const s={sidebar_position:2},d="KraftEffectTextureView",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Important Methods",id:"important-methods",level:2},{value:"<code>setEffect</code>",id:"seteffect",level:3},{value:"<code>requestRender</code>",id:"requestrender",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>renderOnSizeChange</code>",id:"renderonsizechange",level:3},{value:"<code>ratio</code>",id:"ratio",level:3},{value:"Example: Adjustable Effect",id:"example-adjustable-effect",level:2},{value:"Considerations",id:"considerations",level:2},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"krafteffecttextureview",children:"KraftEffectTextureView"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"KraftEffectTextureView"})," extends ",(0,r.jsx)(t.a,{href:"/android-kraft-shade/docs/view-components/android-views/kraft-texture-view",children:"KraftTextureView"})," to provide a convenient way to apply shader effects to images and other content."]}),"\n",(0,r.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"KraftEffectTextureView"})," is designed for applying shader effects to content. It builds on the OpenGL rendering capabilities of ",(0,r.jsx)(t.code,{children:"KraftTextureView"})," and adds functionality specifically for managing effects and controlling when rendering occurs."]}),"\n",(0,r.jsx)(t.p,{children:"This view is ideal for applications that need to apply visual effects to images or other content, with support for both one-time rendering and on-demand updates when effect parameters change."}),"\n",(0,r.jsx)(t.h2,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Manages an ",(0,r.jsx)(t.code,{children:"EffectExecution"})," instance that defines the visual effect to be applied"]}),"\n",(0,r.jsx)(t.li,{children:"Provides methods to set and update effects"}),"\n",(0,r.jsx)(t.li,{children:"Supports on-demand rendering when effect parameters change"}),"\n",(0,r.jsx)(t.li,{children:"Handles aspect ratio adjustments for proper content display"}),"\n",(0,r.jsx)(t.li,{children:"Automatically re-renders when the view size changes (configurable)"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsxs)(t.p,{children:["Here's a simple example of using ",(0,r.jsx)(t.code,{children:"KraftEffectTextureView"})," to apply a saturation effect to an image:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:"class MyActivity : AppCompatActivity() {\n    private lateinit var effectView: KraftEffectTextureView\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        // Create the view\n        effectView = KraftEffectTextureView(this)\n        setContentView(effectView)\n        \n        // Load an image and apply a saturation effect\n        val bitmap = BitmapFactory.decodeResource(resources, R.drawable.my_image)\n        \n        effectView.setEffect(\n            effectExecutionProvider = { windowSurface ->\n                // Create a pipeline with a saturation shader\n                pipeline(windowSurface) {\n                    serialSteps(\n                        inputTexture = bitmap.asTexture(),\n                        targetBuffer = windowSurface\n                    ) {\n                        step(SaturationKraftShader()) { shader ->\n                            shader.saturation = 1.5f  // Increase saturation\n                        }\n                    }\n                }\n            }\n        )\n    }\n    \n    override fun onDestroy() {\n        // Clean up resources\n        effectView.terminate()\n        super.onDestroy()\n    }\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"important-methods",children:"Important Methods"}),"\n",(0,r.jsx)(t.h3,{id:"seteffect",children:(0,r.jsx)(t.code,{children:"setEffect"})}),"\n",(0,r.jsx)(t.p,{children:"The primary method for configuring the effect to be applied:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:"fun setEffect(\n    afterSet: suspend GlEnvDslScope.(windowSurface: WindowSurfaceBuffer) -> Unit = {},\n    effectExecutionProvider: EffectExecutionProvider\n)\n"})}),"\n",(0,r.jsx)(t.p,{children:"This method:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Takes an ",(0,r.jsx)(t.code,{children:"EffectExecutionProvider"})," that creates the effect execution pipeline"]}),"\n",(0,r.jsxs)(t.li,{children:["Optionally accepts an ",(0,r.jsx)(t.code,{children:"afterSet"})," lambda that runs after the effect is set"]}),"\n",(0,r.jsx)(t.li,{children:"Typically used with the pipeline DSL to create a rendering pipeline"}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"requestrender",children:(0,r.jsx)(t.code,{children:"requestRender"})}),"\n",(0,r.jsx)(t.p,{children:"Triggers a render with the current effect:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:"fun requestRender()\n"})}),"\n",(0,r.jsx)(t.p,{children:"Call this method when you've changed effect parameters and want to update the display."}),"\n",(0,r.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(t.h3,{id:"renderonsizechange",children:(0,r.jsx)(t.code,{children:"renderOnSizeChange"})}),"\n",(0,r.jsx)(t.p,{children:"Controls whether rendering is automatically triggered when the view size changes:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:"var renderOnSizeChange: Boolean = true\n"})}),"\n",(0,r.jsx)(t.h3,{id:"ratio",children:(0,r.jsx)(t.code,{children:"ratio"})}),"\n",(0,r.jsx)(t.p,{children:"Sets the aspect ratio of the view (width/height):"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:"var ratio: Float = 0.0f\n"})}),"\n",(0,r.jsx)(t.p,{children:"When set to a non-zero value, the view will maintain this aspect ratio during layout."}),"\n",(0,r.jsx)(t.h2,{id:"example-adjustable-effect",children:"Example: Adjustable Effect"}),"\n",(0,r.jsx)(t.p,{children:"This example shows how to create an effect with parameters that can be adjusted dynamically:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:"class MyEffectActivity : AppCompatActivity() {\n    private lateinit var effectView: KraftEffectTextureView\n    private var saturation = 1.0f\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_effect)\n        \n        effectView = findViewById(R.id.effect_view)\n        val saturationSeekBar = findViewById<SeekBar>(R.id.saturation_seekbar)\n        \n        val bitmap = BitmapFactory.decodeResource(resources, R.drawable.my_image)\n        \n        // Set the aspect ratio based on the bitmap dimensions\n        effectView.ratio = bitmap.width.toFloat() / bitmap.height\n        \n        // Set up the effect\n        effectView.setEffect(\n            effectExecutionProvider = { windowSurface ->\n                pipeline(windowSurface) {\n                    serialSteps(\n                        inputTexture = bitmap.asTexture(),\n                        targetBuffer = windowSurface\n                    ) {\n                        step(SaturationKraftShader()) { shader ->\n                            shader.saturation = saturation\n                        }\n                    }\n                }\n            }\n        )\n        \n        // Update saturation when the seek bar changes\n        saturationSeekBar.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\n            override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\n                saturation = progress / 100f * 2f  // Range: 0 to 2\n                effectView.requestRender()  // Request a render with the new saturation\n            }\n            \n            override fun onStartTrackingTouch(seekBar: SeekBar) {}\n            override fun onStopTrackingTouch(seekBar: SeekBar) {}\n        })\n    }\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"considerations",children:"Considerations"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Effects are applied asynchronously in a coroutine context"}),"\n",(0,r.jsxs)(t.li,{children:["Always call ",(0,r.jsx)(t.code,{children:"requestRender()"})," after changing effect parameters"]}),"\n",(0,r.jsxs)(t.li,{children:["For animated effects that change over time, consider using ",(0,r.jsx)(t.a,{href:"/android-kraft-shade/docs/view-components/android-views/animated-kraft-texture-view",children:"AnimatedKraftTextureView"})," instead"]}),"\n",(0,r.jsxs)(t.li,{children:["The view automatically handles OpenGL context management, but you should still call ",(0,r.jsx)(t.code,{children:"terminate()"})," when done"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(t.p,{children:["For animated effects that change over time, see ",(0,r.jsx)(t.a,{href:"/android-kraft-shade/docs/view-components/android-views/animated-kraft-texture-view",children:"AnimatedKraftTextureView"}),"."]})]})}function f(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>d});var i=n(6540);const r={},a=i.createContext(r);function s(e){const t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);
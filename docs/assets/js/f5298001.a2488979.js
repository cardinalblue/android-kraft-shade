"use strict";(self.webpackChunkdoc_website=self.webpackChunkdoc_website||[]).push([[1282],{6368:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"getting-started/quick-start-guide","title":"Quick Start Guide","description":"This guide will help you get started with KraftShade by creating a simple image effect application. We\'ll walk through the basic steps to set up a project and create a simple effect that adjusts the saturation and brightness of an image.","source":"@site/docs/getting-started/quick-start-guide.md","sourceDirName":"getting-started","slug":"/getting-started/quick-start-guide","permalink":"/android-kraft-shade/docs/getting-started/quick-start-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/cardinalblue/android-kraft-shade/tree/main/doc_website/docs/getting-started/quick-start-guide.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/android-kraft-shade/docs/getting-started/installation"},"next":{"title":"Basic Concepts","permalink":"/android-kraft-shade/docs/getting-started/basic-concepts"}}');var i=t(4848),a=t(8453);const s={sidebar_position:2},o="Quick Start Guide",d={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Setting Up Your Project",id:"setting-up-your-project",level:2},{value:"1. Initialize Logging",id:"1-initialize-logging",level:3},{value:"2. Prepare Your Resources",id:"2-prepare-your-resources",level:3},{value:"Creating a Simple Effect",id:"creating-a-simple-effect",level:2},{value:"Using KraftShade with Android Views",id:"using-kraftshade-with-android-views",level:3},{value:"Using KraftShade with Jetpack Compose",id:"using-kraftshade-with-jetpack-compose",level:3},{value:"Understanding the Code",id:"understanding-the-code",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"quick-start-guide",children:"Quick Start Guide"})}),"\n",(0,i.jsx)(n.p,{children:"This guide will help you get started with KraftShade by creating a simple image effect application. We'll walk through the basic steps to set up a project and create a simple effect that adjusts the saturation and brightness of an image."}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"Before you begin, make sure you have:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Completed the ",(0,i.jsx)(n.a,{href:"./installation",children:"Installation"})," steps"]}),"\n",(0,i.jsx)(n.li,{children:"Basic knowledge of Android development"}),"\n",(0,i.jsx)(n.li,{children:"An Android project set up with Kotlin"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"setting-up-your-project",children:"Setting Up Your Project"}),"\n",(0,i.jsx)(n.h3,{id:"1-initialize-logging",children:"1. Initialize Logging"}),"\n",(0,i.jsx)(n.p,{children:"First, set up logging in your Application class to help with debugging:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"class App : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        \n        // Enable debug logging\n        KraftLogger.logLevel = KraftLogger.Level.DEBUG\n        \n        // Throw exceptions on errors during development\n        KraftLogger.throwOnError = true\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Don't forget to register your Application class in your AndroidManifest.xml."}),"\n",(0,i.jsx)(n.h3,{id:"2-prepare-your-resources",children:"2. Prepare Your Resources"}),"\n",(0,i.jsxs)(n.p,{children:["Add a sample image to your project's resources. For example, place an image in your ",(0,i.jsx)(n.code,{children:"res/drawable"})," folder."]}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-simple-effect",children:"Creating a Simple Effect"}),"\n",(0,i.jsx)(n.h3,{id:"using-kraftshade-with-android-views",children:"Using KraftShade with Android Views"}),"\n",(0,i.jsx)(n.p,{children:"Here's a simple example using traditional Android Views:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"class MainActivity : AppCompatActivity() {\n    private lateinit var kraftEffectView: KraftEffectTextureView\n    private lateinit var saturationSeekBar: SeekBar\n    private lateinit var brightnessSeekBar: SeekBar\n    \n    private var saturation = 1.0f\n    private var brightness = 0.0f\n    private var sampleBitmap: Bitmap? = null\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        \n        // Load sample image\n        sampleBitmap = BitmapFactory.decodeResource(resources, R.drawable.sample_image)\n        \n        // Initialize views\n        kraftEffectView = findViewById(R.id.kraft_effect_view)\n        saturationSeekBar = findViewById(R.id.saturation_seek_bar)\n        brightnessSeekBar = findViewById(R.id.brightness_seek_bar)\n        \n        // Set up seek bars\n        saturationSeekBar.max = 200\n        saturationSeekBar.progress = 100\n        saturationSeekBar.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\n            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {\n                saturation = progress / 100f\n                kraftEffectView.requestRender()\n            }\n            \n            override fun onStartTrackingTouch(seekBar: SeekBar?) {}\n            override fun onStopTrackingTouch(seekBar: SeekBar?) {}\n        })\n        \n        brightnessSeekBar.max = 100\n        brightnessSeekBar.progress = 50\n        brightnessSeekBar.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\n            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {\n                brightness = (progress - 50) / 50f\n                kraftEffectView.requestRender()\n            }\n            \n            override fun onStartTrackingTouch(seekBar: SeekBar?) {}\n            override fun onStopTrackingTouch(seekBar: SeekBar?) {}\n        })\n        \n        // Initialize the effect\n        updateEffect()\n    }\n    \n    private fun updateEffect() {\n        kraftEffectView.setEffect { targetBuffer ->\n            pipeline(targetBuffer) {\n                serialSteps(\n                    inputTexture = sampleBitmap?.asTexture() ?: return@setEffect null,\n                    targetBuffer = targetBuffer\n                ) {\n                    step(SaturationKraftShader()) {\n                        saturation = sampledInput { this@MainActivity.saturation }\n                    }\n                    \n                    step(BrightnessKraftShader()) {\n                        brightness = sampledInput { this@MainActivity.brightness }\n                    }\n                }\n            }\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"using-kraftshade-with-jetpack-compose",children:"Using KraftShade with Jetpack Compose"}),"\n",(0,i.jsx)(n.p,{children:"If you're using Jetpack Compose, here's how to create the same effect:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'@Composable\nfun ImageEffectDemo() {\n    val state = rememberKraftShadeEffectState()\n    \n    var aspectRatio by remember { mutableFloatStateOf(1f) }\n    var image by remember { mutableStateOf<Bitmap?>(null) }\n    \n    var saturation by remember { mutableFloatStateOf(1f) }\n    var brightness by remember { mutableFloatStateOf(0f) }\n    \n    val context = LocalContext.current\n    \n    // Load image and set aspect ratio\n    LaunchedEffect(Unit) {\n        val bitmap = BitmapFactory.decodeResource(context.resources, R.drawable.sample_image)\n        image = bitmap\n        aspectRatio = bitmap.width.toFloat() / bitmap.height.toFloat()\n    }\n    \n    // Set effect\n    LaunchedEffect(Unit) {\n        state.setEffect { targetBuffer ->\n            pipeline(targetBuffer) {\n                serialSteps(\n                    inputTexture = sampledBitmapTextureProvider { image },\n                    targetBuffer = targetBuffer,\n                ) {\n                    step(SaturationKraftShader()) {\n                        saturation = sampledInput { saturation }\n                    }\n                    step(BrightnessKraftShader()) {\n                        brightness = sampledInput { brightness }\n                    }\n                }\n            }\n        }\n    }\n    \n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        // Image preview with effects\n        Box(\n            modifier = Modifier\n                .fillMaxHeight(0.5f)\n                .fillMaxWidth(),\n            contentAlignment = Alignment.Center,\n        ) {\n            KraftShadeEffectView(\n                modifier = Modifier.aspectRatio(aspectRatio),\n                state = state\n            )\n        }\n        \n        // Effect controls\n        Column(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(16.dp)\n        ) {\n            Text("Brightness: ${String.format("%.1f", brightness)}")\n            Slider(\n                value = brightness,\n                onValueChange = {\n                    brightness = it\n                    state.requestRender()\n                },\n                valueRange = -1f..1f\n            )\n            \n            Text("Saturation: ${String.format("%.1f", saturation)}")\n            Slider(\n                value = saturation,\n                onValueChange = {\n                    saturation = it\n                    state.requestRender()\n                },\n                valueRange = 0f..2f\n            )\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"understanding-the-code",children:"Understanding the Code"}),"\n",(0,i.jsx)(n.p,{children:"Let's break down the key components of the example:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Setting up the effect state"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["In traditional views, we use ",(0,i.jsx)(n.code,{children:"KraftEffectTextureView"})]}),"\n",(0,i.jsxs)(n.li,{children:["In Compose, we use ",(0,i.jsx)(n.code,{children:"rememberKraftShadeEffectState()"})," and ",(0,i.jsx)(n.code,{children:"KraftShadeEffectView"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Creating a pipeline"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We use the ",(0,i.jsx)(n.code,{children:"pipeline"})," DSL to define our rendering pipeline"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"serialSteps"})," creates a linear processing chain"]}),"\n",(0,i.jsxs)(n.li,{children:["Each ",(0,i.jsx)(n.code,{children:"step"})," adds a shader to the pipeline"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Configuring shaders"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We use ",(0,i.jsx)(n.code,{children:"SaturationKraftShader"})," and ",(0,i.jsx)(n.code,{children:"BrightnessKraftShader"})]}),"\n",(0,i.jsxs)(n.li,{children:["Parameters are set using ",(0,i.jsx)(n.code,{children:"sampledInput"})," to create dynamic inputs"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Handling user input"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"We update shader parameters based on user input"}),"\n",(0,i.jsxs)(n.li,{children:["In traditional views, we call ",(0,i.jsx)(n.code,{children:"updateEffect()"})," when values change"]}),"\n",(0,i.jsxs)(n.li,{children:["In Compose, we call ",(0,i.jsx)(n.code,{children:"state.requestRender()"})," when values change"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you've created your first KraftShade application, you can:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Learn more about ",(0,i.jsx)(n.a,{href:"./basic-concepts",children:"Basic Concepts"})," in KraftShade"]}),"\n",(0,i.jsxs)(n.li,{children:["Create a more complex ",(0,i.jsx)(n.a,{href:"./first-effect",children:"First Effect"})]}),"\n",(0,i.jsxs)(n.li,{children:["Explore the ",(0,i.jsx)(n.a,{href:"../core-components",children:"Core Components"})," of KraftShade"]}),"\n",(0,i.jsxs)(n.li,{children:["Check out the ",(0,i.jsx)(n.a,{href:"../built-in-shaders",children:"Built-in Shaders"})," for more effect options"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);
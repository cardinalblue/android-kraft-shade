"use strict";(self.webpackChunkdoc_website=self.webpackChunkdoc_website||[]).push([[181],{4921:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"introduction/architecture-overview","title":"Architecture Overview","description":"KraftShade is built with a modular, layered architecture that provides flexibility, performance, and ease of use. This document provides a high-level overview of the KraftShade architecture, its core components, and how they interact.","source":"@site/docs/introduction/architecture-overview.md","sourceDirName":"introduction","slug":"/introduction/architecture-overview","permalink":"/android-kraft-shade/docs/introduction/architecture-overview","draft":false,"unlisted":false,"editUrl":"https://github.com/cardinalblue/android-kraft-shade/tree/main/doc_website/docs/introduction/architecture-overview.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Why KraftShade","permalink":"/android-kraft-shade/docs/introduction/why-kraftshade"},"next":{"title":"Installation","permalink":"/android-kraft-shade/docs/getting-started/installation"}}');var t=i(4848),r=i(8453);const a={sidebar_position:3},o="Architecture Overview",l={},d=[{value:"High-Level Architecture",id:"high-level-architecture",level:2},{value:"Core Components",id:"core-components",level:2},{value:"OpenGL Environment (GlEnv)",id:"opengl-environment-glenv",level:3},{value:"Shader System",id:"shader-system",level:3},{value:"Pipeline System",id:"pipeline-system",level:3},{value:"Input System",id:"input-system",level:3},{value:"DSL Layer",id:"dsl-layer",level:2},{value:"View Components",id:"view-components",level:2},{value:"Android Views",id:"android-views",level:3},{value:"Jetpack Compose",id:"jetpack-compose",level:3},{value:"Data Flow",id:"data-flow",level:2},{value:"Resource Management",id:"resource-management",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"architecture-overview",children:"Architecture Overview"})}),"\n",(0,t.jsx)(n.p,{children:"KraftShade is built with a modular, layered architecture that provides flexibility, performance, and ease of use. This document provides a high-level overview of the KraftShade architecture, its core components, and how they interact."}),"\n",(0,t.jsx)(n.h2,{id:"high-level-architecture",children:"High-Level Architecture"}),"\n",(0,t.jsx)(n.p,{children:"KraftShade's architecture is organized into several key layers:"}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart TD\n    classDef core fill:#c73,stroke:#333,stroke-width:2px,font-size:24px,font-weight:bold,white-space: nowrap\n    classDef view fill:#27c,stroke:#333,stroke-width:2px,font-size:24px,font-weight:bold,white-space: nowrap\n    classDef dsl fill:#3c3,stroke:#333,stroke-width:2px,font-size:24px,font-weight:bold,white-space: nowrap\n    classDef pipeline fill:#93c,stroke:#933,stroke-width:4px,stroke-dasharray: 5 2\n    \n    App[Application] --\x3e Views\n    \n    subgraph Views["View Components"]\n        direction TB\n        AndroidViews["Android Views"] --\x3e KraftTextureView\n        JetpackCompose["Jetpack Compose"] --\x3e KraftShadeView\n        \n        KraftTextureView --\x3e KraftEffectTextureView\n        KraftEffectTextureView --\x3e AnimatedKraftTextureView\n        \n        KraftShadeView --\x3e KraftShadeEffectView\n        KraftShadeEffectView --\x3e KraftShadeAnimatedView\n    end\n    \n    Views --\x3e DSL\n    \n    subgraph DSL["DSL Layer"]\n        direction TB\n        PipelineDSL["Pipeline DSL"]\n        KraftBitmapDSL["Bitmap DSL"]\n    end\n    \n    DSL --\x3e Core\n    \n    subgraph Core["Core Components"]\n        direction TB\n\n        GlEnv["OpenGL Environment (GlEnv)"]\n        \n        PipelineSystem["Pipeline System (Orchestration)"]\n\n        PipelineSystem --\x3e GlEnv\n        \n        KraftShaders --\x3e GlEnv\n\n        PipelineSystem --\x3e InputSystem["Input System"]\n        PipelineSystem --\x3e KraftShaders\n    end\n    \n    class Core core\n    class Views view\n    class DSL dsl\n    class PipelineSystem pipeline'}),"\n",(0,t.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,t.jsx)(n.h3,{id:"opengl-environment-glenv",children:"OpenGL Environment (GlEnv)"}),"\n",(0,t.jsx)(n.p,{children:"The OpenGL Environment is the foundation of KraftShade, providing a managed context for OpenGL operations:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Handles OpenGL context creation and management"}),"\n",(0,t.jsx)(n.li,{children:"Manages the lifecycle of OpenGL resources"}),"\n",(0,t.jsx)(n.li,{children:"Provides utilities for common OpenGL operations"}),"\n",(0,t.jsx)(n.li,{children:"Ensures thread-safety for OpenGL operations"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more details on the OpenGL Environment, see the ",(0,t.jsx)(n.a,{href:"/android-kraft-shade/docs/core-components/glenv",children:"GlEnv documentation"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"shader-system",children:"Shader System"}),"\n",(0,t.jsx)(n.p,{children:"The Shader System is responsible for managing and executing GLSL shaders. It provides a flexible and efficient way to apply various effects to textures."}),"\n",(0,t.jsx)(n.p,{children:"KraftShade provides several basic types of shaders:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"KraftShader"}),": Abstract base class for all shaders"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TextureInputKraftShader"}),": Base class for shaders that take a texture input"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TwoTextureInputKraftShader"}),": Base class for shaders that take two texture inputs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ThreeTextureInputKraftShader"}),": Base class for shaders that take three texture inputs"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more details on the shader system, including execution flow and parameter handling, see the ",(0,t.jsx)(n.a,{href:"/android-kraft-shade/docs/core-components/shader-system/kraft-shader",children:"KraftShader documentation"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"pipeline-system",children:"Pipeline System"}),"\n",(0,t.jsx)(n.p,{children:"The Pipeline System orchestrates the execution of shaders in a defined sequence:"}),"\n",(0,t.jsx)(n.p,{children:"The Pipeline System consists of several key components that work together to execute shader operations in a defined sequence:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Key Components:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"EffectExecution"}),": An interface that defines the contract for executing effects, with methods for running, destroying, and handling buffer size changes."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Pipeline"}),": The main implementation class that executes a sequence of shader operations. It maintains a list of pipeline steps and manages a texture buffer pool for efficient resource usage."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"PipelineStep"}),": An abstract base class for all pipeline steps, defining how each step runs within the pipeline scope."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"RunShaderStep"}),": A concrete implementation of PipelineStep that runs a specific shader."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"RunTaskStep"}),": A concrete implementation of PipelineStep that runs a custom task."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"TextureBufferPool"}),": A utility class that manages and recycles texture buffers to improve performance and reduce memory allocation."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Relationships:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pipeline implements the EffectExecution interface"}),"\n",(0,t.jsx)(n.li,{children:"RunShaderStep and RunTaskStep extend the PipelineStep abstract class"}),"\n",(0,t.jsx)(n.li,{children:"Pipeline contains and manages multiple PipelineStep instances"}),"\n",(0,t.jsx)(n.li,{children:"Pipeline uses TextureBufferPool for buffer management"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Key components:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"EffectExecution"}),": Interface for executing effects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pipeline"}),": Main class for executing a sequence of shader operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"PipelineStep"}),": Abstract base class for pipeline steps"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"RunShaderStep"}),": Step that runs a shader"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"RunTaskStep"}),": Step that runs a custom task"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TextureBufferPool"}),": Manages and recycles texture buffers"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more details on the pipeline system, see the ",(0,t.jsx)(n.a,{href:"/android-kraft-shade/docs/core-components/pipeline-system/pipeline-running-flow",children:"Pipeline Running Flow documentation"})," and ",(0,t.jsx)(n.a,{href:"/android-kraft-shade/docs/core-components/pipeline-system/buffer-management",children:"Buffer Management documentation"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"input-system",children:"Input System"}),"\n",(0,t.jsx)(n.p,{children:"The Input System provides a way to feed dynamic values into shaders:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Supports time-based animations"}),"\n",(0,t.jsx)(n.li,{children:"Allows for user interaction inputs"}),"\n",(0,t.jsx)(n.li,{children:"Enables dynamic parameter changes"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more details on the Input System, see the ",(0,t.jsx)(n.a,{href:"/android-kraft-shade/docs/core-components/input-system",children:"Input System documentation"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"dsl-layer",children:"DSL Layer"}),"\n",(0,t.jsx)(n.p,{children:"KraftShade provides a Kotlin DSL for building shader pipelines:"}),"\n",(0,t.jsx)(n.p,{children:"KraftShade provides a Kotlin DSL for building shader pipelines with a clean and intuitive API. The DSL layer consists of several scope classes that provide a structured way to define pipeline operations:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Key Components:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"BasePipelineSetupScope"}),": The abstract base scope for all pipeline setup operations, providing common functionality like adding shader steps."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"GraphPipelineSetupScope"}),": A specialized scope for setting up graph pipelines, with additional methods for connecting shader inputs to specific textures."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"SerialTextureInputPipelineScope"}),": A scope for setting up serial pipelines, with methods optimized for linear processing chains."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"KraftBitmapDslScope"}),": A scope specifically for creating bitmaps with effects, providing a convenient API for bitmap processing."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Relationships:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"GraphPipelineSetupScope and SerialTextureInputPipelineScope both extend BasePipelineSetupScope"}),"\n",(0,t.jsx)(n.li,{children:"Each scope provides specialized methods appropriate for its pipeline type"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Key components:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"BasePipelineSetupScope"}),": Base scope for pipeline setup"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GraphPipelineSetupScope"}),": Scope for setting up graph pipelines"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SerialTextureInputPipelineScope"}),": Scope for setting up serial pipelines"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"KraftBitmapDslScope"}),": Scope for creating bitmaps with effects"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more details on the DSL layer, see the ",(0,t.jsx)(n.a,{href:"/android-kraft-shade/docs/pipeline-dsl/introduction",children:"Pipeline DSL Introduction"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"view-components",children:"View Components"}),"\n",(0,t.jsx)(n.p,{children:"KraftShade provides view components for both traditional Android Views and Jetpack Compose:"}),"\n",(0,t.jsx)(n.h3,{id:"android-views",children:"Android Views"}),"\n",(0,t.jsx)(n.p,{children:"KraftShade provides a hierarchy of view components for traditional Android Views:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Key Components:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"KraftTextureView"}),": The base view for OpenGL rendering, providing core functionality for executing OpenGL tasks and managing the rendering lifecycle."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"KraftEffectTextureView"}),": Extends KraftTextureView to add support for rendering shader effects, with methods for setting effects and requesting renders."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"AnimatedKraftTextureView"}),": Further extends KraftEffectTextureView to add support for animated effects, with methods for controlling playback."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Relationships:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"KraftEffectTextureView extends KraftTextureView"}),"\n",(0,t.jsx)(n.li,{children:"AnimatedKraftTextureView extends KraftEffectTextureView"}),"\n",(0,t.jsx)(n.li,{children:"Each view in the hierarchy adds more specialized functionality while maintaining the capabilities of its parent"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Key components:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"KraftTextureView"}),": Base view for OpenGL rendering"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"KraftEffectTextureView"}),": View for rendering shader effects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AnimatedKraftTextureView"}),": View for rendering animated shader effects"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more details on Android Views, see the ",(0,t.jsx)(n.a,{href:"/android-kraft-shade/docs/view-components/android-views/kraft-texture-view",children:"Android Views documentation"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"jetpack-compose",children:"Jetpack Compose"}),"\n",(0,t.jsx)(n.p,{children:"For Jetpack Compose integration, KraftShade provides a similar hierarchy of state classes:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Key Components:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"KraftShadeBaseState"}),": The base state for Compose integration, providing core functionality for executing OpenGL tasks and managing the rendering lifecycle."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"KraftShadeEffectState"}),": Extends KraftShadeBaseState to add support for rendering shader effects, with methods for setting effects and requesting renders."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"KraftShadeAnimatedState"}),": Further extends KraftShadeEffectState to add support for animated effects, with methods for controlling playback."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Relationships:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"KraftShadeEffectState extends KraftShadeBaseState"}),"\n",(0,t.jsx)(n.li,{children:"KraftShadeAnimatedState extends KraftShadeEffectState"}),"\n",(0,t.jsx)(n.li,{children:"Each state in the hierarchy adds more specialized functionality while maintaining the capabilities of its parent"}),"\n",(0,t.jsx)(n.li,{children:"These state classes are used by the corresponding Compose components (KraftShadeView, KraftShadeEffectView, KraftShadeAnimatedView)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Key components:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"KraftShadeBaseState"}),": Base state for Compose integration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"KraftShadeEffectState"}),": State for rendering shader effects in Compose"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"KraftShadeAnimatedState"}),": State for rendering animated shader effects in Compose"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more details on Jetpack Compose integration, see the ",(0,t.jsx)(n.a,{href:"/android-kraft-shade/docs/view-components/jetpack-compose/kraft-shade-view",children:"Jetpack Compose documentation"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,t.jsx)(n.p,{children:"The following diagram illustrates the typical data flow in a KraftShade application:"}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart LR\n    classDef input fill:#27c,stroke:#333,stroke-width:2px,font-size:24px,font-weight:bold,white-space: nowrap\n    classDef process fill:#93c,stroke:#933,stroke-width:2px,font-size:24px,font-weight:bold,white-space: nowrap\n    classDef output fill:#c73,stroke:#333,stroke-width:2px,font-size:24px,font-weight:bold,white-space: nowrap\n    \n    Input[Input Texture] --\x3e Pipeline\n    Params[Shader Parameters] --\x3e Pipeline\n    \n    subgraph Pipeline["Pipeline Execution"]\n        direction TB\n        Shader1[Shader 1] --\x3e Buffer1[Intermediate Buffer]\n        Buffer1 --\x3e Shader2[Shader 2]\n        Shader2 --\x3e Buffer2[Intermediate Buffer]\n        Buffer2 --\x3e ShaderN[Shader N]\n    end\n    \n    Pipeline --\x3e Output[Output Texture/Surface]\n    \n    class Input input\n    class Pipeline process\n    class Output output'}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Input textures (from images, camera, etc.) enter the pipeline"}),"\n",(0,t.jsx)(n.li,{children:"Shaders process the textures, applying various effects"}),"\n",(0,t.jsx)(n.li,{children:"Intermediate buffers store results between shader steps"}),"\n",(0,t.jsx)(n.li,{children:"The final output is rendered to a texture or surface"}),"\n",(0,t.jsx)(n.li,{children:"The view component displays the result"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"resource-management",children:"Resource Management"}),"\n",(0,t.jsx)(n.p,{children:"KraftShade efficiently manages OpenGL resources:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automatic Buffer Recycling"}),": Intermediate buffers are automatically recycled"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Texture Reuse"}),": Textures are reused when possible to reduce memory allocation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Proper Cleanup"}),": Resources are properly released when no longer needed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Thread Safety"}),": OpenGL operations are performed on the appropriate thread"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"KraftShade's architecture is designed to provide a flexible, efficient, and easy-to-use framework for GPU-accelerated graphics processing on Android. The modular design allows for easy extension and customization, while the DSL provides a clean and intuitive API for building complex shader pipelines."}),"\n",(0,t.jsx)(n.p,{children:"For more details on specific components, refer to the corresponding sections in the documentation."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(6540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);
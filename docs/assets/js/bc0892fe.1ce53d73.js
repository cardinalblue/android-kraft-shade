"use strict";(self.webpackChunkdoc_website=self.webpackChunkdoc_website||[]).push([[1920],{4346:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"core-components/shader-system/gl-uniform-delegate","title":"GlUniformDelegate","description":"The GlUniformDelegate is a key component of KraftShade\'s shader system that provides an elegant and efficient way to manage shader uniform parameters. It leverages Kotlin\'s property delegation feature to create a clean, type-safe API for setting shader parameters. For more information about how this fits into the shader system, see the KraftShader documentation.","source":"@site/docs/core-components/shader-system/gl-uniform-delegate.md","sourceDirName":"core-components/shader-system","slug":"/core-components/shader-system/gl-uniform-delegate","permalink":"/android-kraft-shade/docs/core-components/shader-system/gl-uniform-delegate","draft":false,"unlisted":false,"editUrl":"https://github.com/cardinalblue/android-kraft-shade/tree/main/doc_website/docs/core-components/shader-system/gl-uniform-delegate.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"KraftShader","permalink":"/android-kraft-shade/docs/core-components/shader-system/kraft-shader"},"next":{"title":"Texture Inputs","permalink":"/android-kraft-shade/docs/core-components/shader-system/texture-inputs"}}');var i=s(4848),t=s(8453);const l={sidebar_position:2},a="GlUniformDelegate",d={},o=[{value:"Overview",id:"overview",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Key Components",id:"key-components",level:3},{value:"Usage Example",id:"usage-example",level:2},{value:"Parameter Update Flow",id:"parameter-update-flow",level:2},{value:"Performance Optimizations",id:"performance-optimizations",level:2},{value:"Supported Types",id:"supported-types",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"gluniformdelegate",children:"GlUniformDelegate"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"GlUniformDelegate"})," is a key component of KraftShade's shader system that provides an elegant and efficient way to manage shader uniform parameters. It leverages Kotlin's property delegation feature to create a clean, type-safe API for setting shader parameters. For more information about how this fits into the shader system, see the ",(0,i.jsx)(n.a,{href:"/android-kraft-shade/docs/core-components/shader-system/kraft-shader",children:"KraftShader documentation"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"In OpenGL, uniform variables are used to pass data from the application to the shader program. Setting these values typically requires:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Getting the location of the uniform variable in the shader program"}),"\n",(0,i.jsxs)(n.li,{children:["Calling the appropriate ",(0,i.jsx)(n.code,{children:"glUniform*"})," function to set the value"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"GlUniformDelegate"})," abstracts away these details, allowing shader parameters to be defined and used as simple Kotlin properties."]}),"\n",(0,i.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"GlUniformDelegate"})," works through a deferred update mechanism:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"When a shader parameter is set, the value is stored locally in the delegate"}),"\n",(0,i.jsxs)(n.li,{children:["A task is queued with the shader's ",(0,i.jsx)(n.code,{children:"runOnDraw"})," method"]}),"\n",(0,i.jsxs)(n.li,{children:["During the next draw call, the ",(0,i.jsx)(n.code,{children:"runPendingOnDrawTasks"})," method executes all queued parameter updates"]}),"\n",(0,i.jsxs)(n.li,{children:["The uniform value is then sent to the GPU using the appropriate ",(0,i.jsx)(n.code,{children:"glUniform*"})," function"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This approach offers several advantages:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Multiple parameter changes are batched together"}),"\n",(0,i.jsx)(n.li,{children:"Updates only happen when needed (during draw calls)"}),"\n",(0,i.jsx)(n.li,{children:"Redundant updates are avoided by tracking value changes"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"GlUniformDelegate"})," is implemented as a Kotlin property delegate that implements the ",(0,i.jsx)(n.code,{children:"ReadWriteProperty"})," interface:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"open class GlUniformDelegate<T : Any>(\n    protected val name: String,\n    protected val required: Boolean = true,\n    protected val checkValueForSet: (T) -> Unit = {},\n) : ReadWriteProperty<KraftShader, T> {\n    // Implementation details...\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"key-components",children:"Key Components"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Uniform Location Caching"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The location of the uniform in the shader program is cached for performance"}),"\n",(0,i.jsx)(n.li,{children:"The location is lazily initialized when first needed"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Value Storage"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The current value is stored locally in the delegate"}),"\n",(0,i.jsx)(n.li,{children:"A hash code of the value is stored to detect changes"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Deferred Updates"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["When a value is set, a task is queued with the shader's ",(0,i.jsx)(n.code,{children:"runOnDraw"})," method"]}),"\n",(0,i.jsx)(n.li,{children:"The task will be executed during the next draw call"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type Handling"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The delegate supports various types (Float, Int, Boolean, vectors, matrices)"}),"\n",(0,i.jsxs)(n.li,{children:["Each type is mapped to the appropriate ",(0,i.jsx)(n.code,{children:"glUniform*"})," function"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsxs)(n.p,{children:["Here's how ",(0,i.jsx)(n.code,{children:"GlUniformDelegate"})," is used in a shader class:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'class OpacityKraftShader(opacity: Float = 1.0f) : TextureInputKraftShader() {\n    var opacity: Float by GlUniformDelegate("opacity")\n\n    init {\n        this.opacity = opacity\n    }\n\n    override fun loadFragmentShader(): String = OPACITY_FRAGMENT_SHADER\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"In this example:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"opacity"})," property is defined using ",(0,i.jsx)(n.code,{children:"GlUniformDelegate"})]}),"\n",(0,i.jsx)(n.li,{children:'The delegate is configured to update the "opacity" uniform in the shader'}),"\n",(0,i.jsxs)(n.li,{children:["When ",(0,i.jsx)(n.code,{children:"opacity"})," is set, the update is queued for the next draw call"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"parameter-update-flow",children:"Parameter Update Flow"}),"\n",(0,i.jsx)(n.p,{children:"The following sequence illustrates how parameter updates flow through the system:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Property Access"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"shader.opacity = 0.5f\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Delegate Setter"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"setValue"})," method of the delegate is called"]}),"\n",(0,i.jsx)(n.li,{children:"The value is stored locally"}),"\n",(0,i.jsxs)(n.li,{children:["A task is queued with the shader's ",(0,i.jsx)(n.code,{children:"runOnDraw"})," method"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Draw Call"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["When ",(0,i.jsx)(n.code,{children:"shader.draw()"})," is called, ",(0,i.jsx)(n.code,{children:"runPendingOnDrawTasks"})," executes all queued tasks"]}),"\n",(0,i.jsx)(n.li,{children:"The delegate's task retrieves the uniform location"}),"\n",(0,i.jsxs)(n.li,{children:["The appropriate ",(0,i.jsx)(n.code,{children:"glUniform*"})," function is called to set the value in the shader program"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Rendering"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The shader program uses the updated uniform value during rendering"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"performance-optimizations",children:"Performance Optimizations"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"GlUniformDelegate"})," includes several optimizations:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Value Change Detection"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The delegate computes a hash code for the current value"}),"\n",(0,i.jsx)(n.li,{children:"If the new value has the same hash code, the update is skipped"}),"\n",(0,i.jsx)(n.li,{children:"This prevents redundant GPU updates when values haven't changed"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Location Caching"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Uniform locations are cached to avoid repeated calls to ",(0,i.jsx)(n.code,{children:"glGetUniformLocation"})]}),"\n",(0,i.jsx)(n.li,{children:"This reduces CPU overhead during parameter updates"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Batched Updates"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All parameter updates are batched and applied during the draw call"}),"\n",(0,i.jsx)(n.li,{children:"This minimizes OpenGL state changes and improves performance"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"supported-types",children:"Supported Types"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"GlUniformDelegate"})," supports a wide range of types:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Primitive Types"}),": Boolean, Int, Float"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Array Types"}),": FloatArray, GlFloatArray"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Vector Types"}),": GlVec2, GlVec3, GlVec4"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Matrix Types"}),": GlMat2, GlMat3, GlMat4"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Size Types"}),": GlSize, GlSizeF"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Each type is automatically mapped to the appropriate ",(0,i.jsx)(n.code,{children:"glUniform*"})," function."]})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var r=s(6540);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);